// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: project.proto

package projectpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectService_CreateProject_FullMethodName               = "/project.ProjectService/CreateProject"
	ProjectService_AddMembers_FullMethodName                  = "/project.ProjectService/AddMembers"
	ProjectService_ProjectInvites_FullMethodName              = "/project.ProjectService/ProjectInvites"
	ProjectService_AcceptProjectInvite_FullMethodName         = "/project.ProjectService/AcceptProjectInvite"
	ProjectService_GetProjectDetailes_FullMethodName          = "/project.ProjectService/GetProjectDetailes"
	ProjectService_GetProjectMembers_FullMethodName           = "/project.ProjectService/GetProjectMembers"
	ProjectService_LogintoProject_FullMethodName              = "/project.ProjectService/LogintoProject"
	ProjectService_AddMemberStatus_FullMethodName             = "/project.ProjectService/AddMemberStatus"
	ProjectService_GetAssignedTask_FullMethodName             = "/project.ProjectService/GetAssignedTask"
	ProjectService_DownloadTask_FullMethodName                = "/project.ProjectService/DownloadTask"
	ProjectService_GetProgressofMembers_FullMethodName        = "/project.ProjectService/GetProgressofMembers"
	ProjectService_GetProgressofMember_FullMethodName         = "/project.ProjectService/GetProgressofMember"
	ProjectService_GetProjectProgress_FullMethodName          = "/project.ProjectService/GetProjectProgress"
	ProjectService_MarkProgressofNonTechnical_FullMethodName  = "/project.ProjectService/MarkProgressofNonTechnical"
	ProjectService_AddTaskStatuses_FullMethodName             = "/project.ProjectService/AddTaskStatuses"
	ProjectService_GetLiveProjects_FullMethodName             = "/project.ProjectService/GetLiveProjects"
	ProjectService_IsMemberAccepted_FullMethodName            = "/project.ProjectService/IsMemberAccepted"
	ProjectService_GetStreamofProjectDetails_FullMethodName   = "/project.ProjectService/GetStreamofProjectDetails"
	ProjectService_GetCompletedMembers_FullMethodName         = "/project.ProjectService/GetCompletedMembers"
	ProjectService_GetCriticalMembers_FullMethodName          = "/project.ProjectService/GetCriticalMembers"
	ProjectService_RaiseIssue_FullMethodName                  = "/project.ProjectService/RaiseIssue"
	ProjectService_GetIssues_FullMethodName                   = "/project.ProjectService/GetIssues"
	ProjectService_GetIssuesofProject_FullMethodName          = "/project.ProjectService/GetIssuesofProject"
	ProjectService_RateTask_FullMethodName                    = "/project.ProjectService/RateTask"
	ProjectService_GetfeedBackforTask_FullMethodName          = "/project.ProjectService/GetfeedBackforTask"
	ProjectService_RequestforDeadlineExtension_FullMethodName = "/project.ProjectService/RequestforDeadlineExtension"
	ProjectService_GetExtensionRequests_FullMethodName        = "/project.ProjectService/GetExtensionRequests"
	ProjectService_GrantExtension_FullMethodName              = "/project.ProjectService/GrantExtension"
	ProjectService_VerifyTaskCompletion_FullMethodName        = "/project.ProjectService/VerifyTaskCompletion"
	ProjectService_GetVerifiedTasks_FullMethodName            = "/project.ProjectService/GetVerifiedTasks"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectRes, error)
	AddMembers(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectInvites(ctx context.Context, in *ProjectInvitesReq, opts ...grpc.CallOption) (ProjectService_ProjectInvitesClient, error)
	AcceptProjectInvite(ctx context.Context, in *AcceptProjectInviteReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetProjectDetailes(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectDetailesRes, error)
	GetProjectMembers(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (ProjectService_GetProjectMembersClient, error)
	LogintoProject(ctx context.Context, in *LogintoProjectReq, opts ...grpc.CallOption) (*LogintoProjectRes, error)
	AddMemberStatus(ctx context.Context, in *MemberStatusReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAssignedTask(ctx context.Context, in *GetAssignedTaskReq, opts ...grpc.CallOption) (*GetAssignedTaskRes, error)
	DownloadTask(ctx context.Context, in *DownloadTaskReq, opts ...grpc.CallOption) (*DownloadTaskRes, error)
	GetProgressofMembers(ctx context.Context, in *GetProgressofMembersReq, opts ...grpc.CallOption) (ProjectService_GetProgressofMembersClient, error)
	GetProgressofMember(ctx context.Context, in *GetProgressofMemberReq, opts ...grpc.CallOption) (*GetProgressofMemberRes, error)
	GetProjectProgress(ctx context.Context, in *GetProjectProgressReq, opts ...grpc.CallOption) (*GetProjectProgressRes, error)
	MarkProgressofNonTechnical(ctx context.Context, in *MarkProgressofNonTechnicalReq, opts ...grpc.CallOption) (*empty.Empty, error)
	AddTaskStatuses(ctx context.Context, in *AddTaskStatusesReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLiveProjects(ctx context.Context, in *GetLiveProjectsReq, opts ...grpc.CallOption) (ProjectService_GetLiveProjectsClient, error)
	IsMemberAccepted(ctx context.Context, in *IsMemberAcceptedReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStreamofProjectDetails(ctx context.Context, opts ...grpc.CallOption) (ProjectService_GetStreamofProjectDetailsClient, error)
	GetCompletedMembers(ctx context.Context, in *GetCompletedMembersReq, opts ...grpc.CallOption) (ProjectService_GetCompletedMembersClient, error)
	GetCriticalMembers(ctx context.Context, in *GetCriticalMembersReq, opts ...grpc.CallOption) (ProjectService_GetCriticalMembersClient, error)
	RaiseIssue(ctx context.Context, in *RaiseIssueReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetIssues(ctx context.Context, in *GetIssuesReq, opts ...grpc.CallOption) (*GetIssuesRes, error)
	GetIssuesofProject(ctx context.Context, in *GetIssuesofProjectReq, opts ...grpc.CallOption) (ProjectService_GetIssuesofProjectClient, error)
	RateTask(ctx context.Context, in *RateTaskReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetfeedBackforTask(ctx context.Context, in *GetfeedBackforTaskReq, opts ...grpc.CallOption) (*GetfeedBackforTaskRes, error)
	RequestforDeadlineExtension(ctx context.Context, in *RequestforDeadlineExtensionReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetExtensionRequests(ctx context.Context, in *GetExtensionRequestsReq, opts ...grpc.CallOption) (ProjectService_GetExtensionRequestsClient, error)
	GrantExtension(ctx context.Context, in *GrantExtensionReq, opts ...grpc.CallOption) (*empty.Empty, error)
	VerifyTaskCompletion(ctx context.Context, in *VerifyTaskCompletionReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetVerifiedTasks(ctx context.Context, in *GetVerifiedTasksReq, opts ...grpc.CallOption) (ProjectService_GetVerifiedTasksClient, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectRes, error) {
	out := new(CreateProjectRes)
	err := c.cc.Invoke(ctx, ProjectService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddMembers(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_AddMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ProjectInvites(ctx context.Context, in *ProjectInvitesReq, opts ...grpc.CallOption) (ProjectService_ProjectInvitesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[0], ProjectService_ProjectInvites_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceProjectInvitesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_ProjectInvitesClient interface {
	Recv() (*ProjectInvitesRes, error)
	grpc.ClientStream
}

type projectServiceProjectInvitesClient struct {
	grpc.ClientStream
}

func (x *projectServiceProjectInvitesClient) Recv() (*ProjectInvitesRes, error) {
	m := new(ProjectInvitesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) AcceptProjectInvite(ctx context.Context, in *AcceptProjectInviteReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_AcceptProjectInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectDetailes(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectDetailesRes, error) {
	out := new(GetProjectDetailesRes)
	err := c.cc.Invoke(ctx, ProjectService_GetProjectDetailes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectMembers(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (ProjectService_GetProjectMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[1], ProjectService_GetProjectMembers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGetProjectMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_GetProjectMembersClient interface {
	Recv() (*GetProjectMembersRes, error)
	grpc.ClientStream
}

type projectServiceGetProjectMembersClient struct {
	grpc.ClientStream
}

func (x *projectServiceGetProjectMembersClient) Recv() (*GetProjectMembersRes, error) {
	m := new(GetProjectMembersRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) LogintoProject(ctx context.Context, in *LogintoProjectReq, opts ...grpc.CallOption) (*LogintoProjectRes, error) {
	out := new(LogintoProjectRes)
	err := c.cc.Invoke(ctx, ProjectService_LogintoProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddMemberStatus(ctx context.Context, in *MemberStatusReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_AddMemberStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetAssignedTask(ctx context.Context, in *GetAssignedTaskReq, opts ...grpc.CallOption) (*GetAssignedTaskRes, error) {
	out := new(GetAssignedTaskRes)
	err := c.cc.Invoke(ctx, ProjectService_GetAssignedTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DownloadTask(ctx context.Context, in *DownloadTaskReq, opts ...grpc.CallOption) (*DownloadTaskRes, error) {
	out := new(DownloadTaskRes)
	err := c.cc.Invoke(ctx, ProjectService_DownloadTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProgressofMembers(ctx context.Context, in *GetProgressofMembersReq, opts ...grpc.CallOption) (ProjectService_GetProgressofMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[2], ProjectService_GetProgressofMembers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGetProgressofMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_GetProgressofMembersClient interface {
	Recv() (*GetProgressofMembersRes, error)
	grpc.ClientStream
}

type projectServiceGetProgressofMembersClient struct {
	grpc.ClientStream
}

func (x *projectServiceGetProgressofMembersClient) Recv() (*GetProgressofMembersRes, error) {
	m := new(GetProgressofMembersRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) GetProgressofMember(ctx context.Context, in *GetProgressofMemberReq, opts ...grpc.CallOption) (*GetProgressofMemberRes, error) {
	out := new(GetProgressofMemberRes)
	err := c.cc.Invoke(ctx, ProjectService_GetProgressofMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectProgress(ctx context.Context, in *GetProjectProgressReq, opts ...grpc.CallOption) (*GetProjectProgressRes, error) {
	out := new(GetProjectProgressRes)
	err := c.cc.Invoke(ctx, ProjectService_GetProjectProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) MarkProgressofNonTechnical(ctx context.Context, in *MarkProgressofNonTechnicalReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_MarkProgressofNonTechnical_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddTaskStatuses(ctx context.Context, in *AddTaskStatusesReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_AddTaskStatuses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetLiveProjects(ctx context.Context, in *GetLiveProjectsReq, opts ...grpc.CallOption) (ProjectService_GetLiveProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[3], ProjectService_GetLiveProjects_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGetLiveProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_GetLiveProjectsClient interface {
	Recv() (*GetLiveProjectsRes, error)
	grpc.ClientStream
}

type projectServiceGetLiveProjectsClient struct {
	grpc.ClientStream
}

func (x *projectServiceGetLiveProjectsClient) Recv() (*GetLiveProjectsRes, error) {
	m := new(GetLiveProjectsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) IsMemberAccepted(ctx context.Context, in *IsMemberAcceptedReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_IsMemberAccepted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetStreamofProjectDetails(ctx context.Context, opts ...grpc.CallOption) (ProjectService_GetStreamofProjectDetailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[4], ProjectService_GetStreamofProjectDetails_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGetStreamofProjectDetailsClient{stream}
	return x, nil
}

type ProjectService_GetStreamofProjectDetailsClient interface {
	Send(*GetStreamofProjectDetailsReq) error
	Recv() (*GetProjectDetailesRes, error)
	grpc.ClientStream
}

type projectServiceGetStreamofProjectDetailsClient struct {
	grpc.ClientStream
}

func (x *projectServiceGetStreamofProjectDetailsClient) Send(m *GetStreamofProjectDetailsReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *projectServiceGetStreamofProjectDetailsClient) Recv() (*GetProjectDetailesRes, error) {
	m := new(GetProjectDetailesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) GetCompletedMembers(ctx context.Context, in *GetCompletedMembersReq, opts ...grpc.CallOption) (ProjectService_GetCompletedMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[5], ProjectService_GetCompletedMembers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGetCompletedMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_GetCompletedMembersClient interface {
	Recv() (*GetCompletedMembersRes, error)
	grpc.ClientStream
}

type projectServiceGetCompletedMembersClient struct {
	grpc.ClientStream
}

func (x *projectServiceGetCompletedMembersClient) Recv() (*GetCompletedMembersRes, error) {
	m := new(GetCompletedMembersRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) GetCriticalMembers(ctx context.Context, in *GetCriticalMembersReq, opts ...grpc.CallOption) (ProjectService_GetCriticalMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[6], ProjectService_GetCriticalMembers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGetCriticalMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_GetCriticalMembersClient interface {
	Recv() (*GetCriticalMembersRes, error)
	grpc.ClientStream
}

type projectServiceGetCriticalMembersClient struct {
	grpc.ClientStream
}

func (x *projectServiceGetCriticalMembersClient) Recv() (*GetCriticalMembersRes, error) {
	m := new(GetCriticalMembersRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) RaiseIssue(ctx context.Context, in *RaiseIssueReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_RaiseIssue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetIssues(ctx context.Context, in *GetIssuesReq, opts ...grpc.CallOption) (*GetIssuesRes, error) {
	out := new(GetIssuesRes)
	err := c.cc.Invoke(ctx, ProjectService_GetIssues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetIssuesofProject(ctx context.Context, in *GetIssuesofProjectReq, opts ...grpc.CallOption) (ProjectService_GetIssuesofProjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[7], ProjectService_GetIssuesofProject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGetIssuesofProjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_GetIssuesofProjectClient interface {
	Recv() (*GetIssuesofProjectRes, error)
	grpc.ClientStream
}

type projectServiceGetIssuesofProjectClient struct {
	grpc.ClientStream
}

func (x *projectServiceGetIssuesofProjectClient) Recv() (*GetIssuesofProjectRes, error) {
	m := new(GetIssuesofProjectRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) RateTask(ctx context.Context, in *RateTaskReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_RateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetfeedBackforTask(ctx context.Context, in *GetfeedBackforTaskReq, opts ...grpc.CallOption) (*GetfeedBackforTaskRes, error) {
	out := new(GetfeedBackforTaskRes)
	err := c.cc.Invoke(ctx, ProjectService_GetfeedBackforTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RequestforDeadlineExtension(ctx context.Context, in *RequestforDeadlineExtensionReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_RequestforDeadlineExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetExtensionRequests(ctx context.Context, in *GetExtensionRequestsReq, opts ...grpc.CallOption) (ProjectService_GetExtensionRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[8], ProjectService_GetExtensionRequests_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGetExtensionRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_GetExtensionRequestsClient interface {
	Recv() (*GetExtensionRequestsRes, error)
	grpc.ClientStream
}

type projectServiceGetExtensionRequestsClient struct {
	grpc.ClientStream
}

func (x *projectServiceGetExtensionRequestsClient) Recv() (*GetExtensionRequestsRes, error) {
	m := new(GetExtensionRequestsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) GrantExtension(ctx context.Context, in *GrantExtensionReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_GrantExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) VerifyTaskCompletion(ctx context.Context, in *VerifyTaskCompletionReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectService_VerifyTaskCompletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetVerifiedTasks(ctx context.Context, in *GetVerifiedTasksReq, opts ...grpc.CallOption) (ProjectService_GetVerifiedTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[9], ProjectService_GetVerifiedTasks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGetVerifiedTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_GetVerifiedTasksClient interface {
	Recv() (*GetVerifiedTasksRes, error)
	grpc.ClientStream
}

type projectServiceGetVerifiedTasksClient struct {
	grpc.ClientStream
}

func (x *projectServiceGetVerifiedTasksClient) Recv() (*GetVerifiedTasksRes, error) {
	m := new(GetVerifiedTasksRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	CreateProject(context.Context, *CreateProjectReq) (*CreateProjectRes, error)
	AddMembers(context.Context, *AddMemberReq) (*empty.Empty, error)
	ProjectInvites(*ProjectInvitesReq, ProjectService_ProjectInvitesServer) error
	AcceptProjectInvite(context.Context, *AcceptProjectInviteReq) (*empty.Empty, error)
	GetProjectDetailes(context.Context, *GetProjectReq) (*GetProjectDetailesRes, error)
	GetProjectMembers(*GetProjectReq, ProjectService_GetProjectMembersServer) error
	LogintoProject(context.Context, *LogintoProjectReq) (*LogintoProjectRes, error)
	AddMemberStatus(context.Context, *MemberStatusReq) (*empty.Empty, error)
	GetAssignedTask(context.Context, *GetAssignedTaskReq) (*GetAssignedTaskRes, error)
	DownloadTask(context.Context, *DownloadTaskReq) (*DownloadTaskRes, error)
	GetProgressofMembers(*GetProgressofMembersReq, ProjectService_GetProgressofMembersServer) error
	GetProgressofMember(context.Context, *GetProgressofMemberReq) (*GetProgressofMemberRes, error)
	GetProjectProgress(context.Context, *GetProjectProgressReq) (*GetProjectProgressRes, error)
	MarkProgressofNonTechnical(context.Context, *MarkProgressofNonTechnicalReq) (*empty.Empty, error)
	AddTaskStatuses(context.Context, *AddTaskStatusesReq) (*empty.Empty, error)
	GetLiveProjects(*GetLiveProjectsReq, ProjectService_GetLiveProjectsServer) error
	IsMemberAccepted(context.Context, *IsMemberAcceptedReq) (*empty.Empty, error)
	GetStreamofProjectDetails(ProjectService_GetStreamofProjectDetailsServer) error
	GetCompletedMembers(*GetCompletedMembersReq, ProjectService_GetCompletedMembersServer) error
	GetCriticalMembers(*GetCriticalMembersReq, ProjectService_GetCriticalMembersServer) error
	RaiseIssue(context.Context, *RaiseIssueReq) (*empty.Empty, error)
	GetIssues(context.Context, *GetIssuesReq) (*GetIssuesRes, error)
	GetIssuesofProject(*GetIssuesofProjectReq, ProjectService_GetIssuesofProjectServer) error
	RateTask(context.Context, *RateTaskReq) (*empty.Empty, error)
	GetfeedBackforTask(context.Context, *GetfeedBackforTaskReq) (*GetfeedBackforTaskRes, error)
	RequestforDeadlineExtension(context.Context, *RequestforDeadlineExtensionReq) (*empty.Empty, error)
	GetExtensionRequests(*GetExtensionRequestsReq, ProjectService_GetExtensionRequestsServer) error
	GrantExtension(context.Context, *GrantExtensionReq) (*empty.Empty, error)
	VerifyTaskCompletion(context.Context, *VerifyTaskCompletionReq) (*empty.Empty, error)
	GetVerifiedTasks(*GetVerifiedTasksReq, ProjectService_GetVerifiedTasksServer) error
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectReq) (*CreateProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) AddMembers(context.Context, *AddMemberReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMembers not implemented")
}
func (UnimplementedProjectServiceServer) ProjectInvites(*ProjectInvitesReq, ProjectService_ProjectInvitesServer) error {
	return status.Errorf(codes.Unimplemented, "method ProjectInvites not implemented")
}
func (UnimplementedProjectServiceServer) AcceptProjectInvite(context.Context, *AcceptProjectInviteReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProjectInvite not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectDetailes(context.Context, *GetProjectReq) (*GetProjectDetailesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDetailes not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectMembers(*GetProjectReq, ProjectService_GetProjectMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjectMembers not implemented")
}
func (UnimplementedProjectServiceServer) LogintoProject(context.Context, *LogintoProjectReq) (*LogintoProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogintoProject not implemented")
}
func (UnimplementedProjectServiceServer) AddMemberStatus(context.Context, *MemberStatusReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberStatus not implemented")
}
func (UnimplementedProjectServiceServer) GetAssignedTask(context.Context, *GetAssignedTaskReq) (*GetAssignedTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedTask not implemented")
}
func (UnimplementedProjectServiceServer) DownloadTask(context.Context, *DownloadTaskReq) (*DownloadTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadTask not implemented")
}
func (UnimplementedProjectServiceServer) GetProgressofMembers(*GetProgressofMembersReq, ProjectService_GetProgressofMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProgressofMembers not implemented")
}
func (UnimplementedProjectServiceServer) GetProgressofMember(context.Context, *GetProgressofMemberReq) (*GetProgressofMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgressofMember not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectProgress(context.Context, *GetProjectProgressReq) (*GetProjectProgressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectProgress not implemented")
}
func (UnimplementedProjectServiceServer) MarkProgressofNonTechnical(context.Context, *MarkProgressofNonTechnicalReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkProgressofNonTechnical not implemented")
}
func (UnimplementedProjectServiceServer) AddTaskStatuses(context.Context, *AddTaskStatusesReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskStatuses not implemented")
}
func (UnimplementedProjectServiceServer) GetLiveProjects(*GetLiveProjectsReq, ProjectService_GetLiveProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLiveProjects not implemented")
}
func (UnimplementedProjectServiceServer) IsMemberAccepted(context.Context, *IsMemberAcceptedReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMemberAccepted not implemented")
}
func (UnimplementedProjectServiceServer) GetStreamofProjectDetails(ProjectService_GetStreamofProjectDetailsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamofProjectDetails not implemented")
}
func (UnimplementedProjectServiceServer) GetCompletedMembers(*GetCompletedMembersReq, ProjectService_GetCompletedMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCompletedMembers not implemented")
}
func (UnimplementedProjectServiceServer) GetCriticalMembers(*GetCriticalMembersReq, ProjectService_GetCriticalMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCriticalMembers not implemented")
}
func (UnimplementedProjectServiceServer) RaiseIssue(context.Context, *RaiseIssueReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaiseIssue not implemented")
}
func (UnimplementedProjectServiceServer) GetIssues(context.Context, *GetIssuesReq) (*GetIssuesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssues not implemented")
}
func (UnimplementedProjectServiceServer) GetIssuesofProject(*GetIssuesofProjectReq, ProjectService_GetIssuesofProjectServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIssuesofProject not implemented")
}
func (UnimplementedProjectServiceServer) RateTask(context.Context, *RateTaskReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateTask not implemented")
}
func (UnimplementedProjectServiceServer) GetfeedBackforTask(context.Context, *GetfeedBackforTaskReq) (*GetfeedBackforTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetfeedBackforTask not implemented")
}
func (UnimplementedProjectServiceServer) RequestforDeadlineExtension(context.Context, *RequestforDeadlineExtensionReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestforDeadlineExtension not implemented")
}
func (UnimplementedProjectServiceServer) GetExtensionRequests(*GetExtensionRequestsReq, ProjectService_GetExtensionRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetExtensionRequests not implemented")
}
func (UnimplementedProjectServiceServer) GrantExtension(context.Context, *GrantExtensionReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantExtension not implemented")
}
func (UnimplementedProjectServiceServer) VerifyTaskCompletion(context.Context, *VerifyTaskCompletionReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTaskCompletion not implemented")
}
func (UnimplementedProjectServiceServer) GetVerifiedTasks(*GetVerifiedTasksReq, ProjectService_GetVerifiedTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVerifiedTasks not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_AddMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddMembers(ctx, req.(*AddMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ProjectInvites_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectInvitesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).ProjectInvites(m, &projectServiceProjectInvitesServer{stream})
}

type ProjectService_ProjectInvitesServer interface {
	Send(*ProjectInvitesRes) error
	grpc.ServerStream
}

type projectServiceProjectInvitesServer struct {
	grpc.ServerStream
}

func (x *projectServiceProjectInvitesServer) Send(m *ProjectInvitesRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectService_AcceptProjectInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptProjectInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AcceptProjectInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_AcceptProjectInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AcceptProjectInvite(ctx, req.(*AcceptProjectInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectDetailes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectDetailes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetProjectDetailes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectDetailes(ctx, req.(*GetProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProjectReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).GetProjectMembers(m, &projectServiceGetProjectMembersServer{stream})
}

type ProjectService_GetProjectMembersServer interface {
	Send(*GetProjectMembersRes) error
	grpc.ServerStream
}

type projectServiceGetProjectMembersServer struct {
	grpc.ServerStream
}

func (x *projectServiceGetProjectMembersServer) Send(m *GetProjectMembersRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectService_LogintoProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogintoProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).LogintoProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_LogintoProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).LogintoProject(ctx, req.(*LogintoProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddMemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddMemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_AddMemberStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddMemberStatus(ctx, req.(*MemberStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetAssignedTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetAssignedTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetAssignedTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetAssignedTask(ctx, req.(*GetAssignedTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DownloadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DownloadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_DownloadTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DownloadTask(ctx, req.(*DownloadTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProgressofMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProgressofMembersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).GetProgressofMembers(m, &projectServiceGetProgressofMembersServer{stream})
}

type ProjectService_GetProgressofMembersServer interface {
	Send(*GetProgressofMembersRes) error
	grpc.ServerStream
}

type projectServiceGetProgressofMembersServer struct {
	grpc.ServerStream
}

func (x *projectServiceGetProgressofMembersServer) Send(m *GetProgressofMembersRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectService_GetProgressofMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgressofMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProgressofMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetProgressofMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProgressofMember(ctx, req.(*GetProgressofMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetProjectProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectProgress(ctx, req.(*GetProjectProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_MarkProgressofNonTechnical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkProgressofNonTechnicalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).MarkProgressofNonTechnical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_MarkProgressofNonTechnical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).MarkProgressofNonTechnical(ctx, req.(*MarkProgressofNonTechnicalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddTaskStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskStatusesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddTaskStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_AddTaskStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddTaskStatuses(ctx, req.(*AddTaskStatusesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetLiveProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLiveProjectsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).GetLiveProjects(m, &projectServiceGetLiveProjectsServer{stream})
}

type ProjectService_GetLiveProjectsServer interface {
	Send(*GetLiveProjectsRes) error
	grpc.ServerStream
}

type projectServiceGetLiveProjectsServer struct {
	grpc.ServerStream
}

func (x *projectServiceGetLiveProjectsServer) Send(m *GetLiveProjectsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectService_IsMemberAccepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMemberAcceptedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).IsMemberAccepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_IsMemberAccepted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).IsMemberAccepted(ctx, req.(*IsMemberAcceptedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetStreamofProjectDetails_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProjectServiceServer).GetStreamofProjectDetails(&projectServiceGetStreamofProjectDetailsServer{stream})
}

type ProjectService_GetStreamofProjectDetailsServer interface {
	Send(*GetProjectDetailesRes) error
	Recv() (*GetStreamofProjectDetailsReq, error)
	grpc.ServerStream
}

type projectServiceGetStreamofProjectDetailsServer struct {
	grpc.ServerStream
}

func (x *projectServiceGetStreamofProjectDetailsServer) Send(m *GetProjectDetailesRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *projectServiceGetStreamofProjectDetailsServer) Recv() (*GetStreamofProjectDetailsReq, error) {
	m := new(GetStreamofProjectDetailsReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProjectService_GetCompletedMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCompletedMembersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).GetCompletedMembers(m, &projectServiceGetCompletedMembersServer{stream})
}

type ProjectService_GetCompletedMembersServer interface {
	Send(*GetCompletedMembersRes) error
	grpc.ServerStream
}

type projectServiceGetCompletedMembersServer struct {
	grpc.ServerStream
}

func (x *projectServiceGetCompletedMembersServer) Send(m *GetCompletedMembersRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectService_GetCriticalMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCriticalMembersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).GetCriticalMembers(m, &projectServiceGetCriticalMembersServer{stream})
}

type ProjectService_GetCriticalMembersServer interface {
	Send(*GetCriticalMembersRes) error
	grpc.ServerStream
}

type projectServiceGetCriticalMembersServer struct {
	grpc.ServerStream
}

func (x *projectServiceGetCriticalMembersServer) Send(m *GetCriticalMembersRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectService_RaiseIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaiseIssueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RaiseIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_RaiseIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RaiseIssue(ctx, req.(*RaiseIssueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetIssues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetIssues(ctx, req.(*GetIssuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetIssuesofProject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetIssuesofProjectReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).GetIssuesofProject(m, &projectServiceGetIssuesofProjectServer{stream})
}

type ProjectService_GetIssuesofProjectServer interface {
	Send(*GetIssuesofProjectRes) error
	grpc.ServerStream
}

type projectServiceGetIssuesofProjectServer struct {
	grpc.ServerStream
}

func (x *projectServiceGetIssuesofProjectServer) Send(m *GetIssuesofProjectRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectService_RateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_RateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RateTask(ctx, req.(*RateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetfeedBackforTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetfeedBackforTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetfeedBackforTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetfeedBackforTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetfeedBackforTask(ctx, req.(*GetfeedBackforTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RequestforDeadlineExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestforDeadlineExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RequestforDeadlineExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_RequestforDeadlineExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RequestforDeadlineExtension(ctx, req.(*RequestforDeadlineExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetExtensionRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetExtensionRequestsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).GetExtensionRequests(m, &projectServiceGetExtensionRequestsServer{stream})
}

type ProjectService_GetExtensionRequestsServer interface {
	Send(*GetExtensionRequestsRes) error
	grpc.ServerStream
}

type projectServiceGetExtensionRequestsServer struct {
	grpc.ServerStream
}

func (x *projectServiceGetExtensionRequestsServer) Send(m *GetExtensionRequestsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectService_GrantExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GrantExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GrantExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GrantExtension(ctx, req.(*GrantExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_VerifyTaskCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTaskCompletionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).VerifyTaskCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_VerifyTaskCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).VerifyTaskCompletion(ctx, req.(*VerifyTaskCompletionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetVerifiedTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVerifiedTasksReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).GetVerifiedTasks(m, &projectServiceGetVerifiedTasksServer{stream})
}

type ProjectService_GetVerifiedTasksServer interface {
	Send(*GetVerifiedTasksRes) error
	grpc.ServerStream
}

type projectServiceGetVerifiedTasksServer struct {
	grpc.ServerStream
}

func (x *projectServiceGetVerifiedTasksServer) Send(m *GetVerifiedTasksRes) error {
	return x.ServerStream.SendMsg(m)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "AddMembers",
			Handler:    _ProjectService_AddMembers_Handler,
		},
		{
			MethodName: "AcceptProjectInvite",
			Handler:    _ProjectService_AcceptProjectInvite_Handler,
		},
		{
			MethodName: "GetProjectDetailes",
			Handler:    _ProjectService_GetProjectDetailes_Handler,
		},
		{
			MethodName: "LogintoProject",
			Handler:    _ProjectService_LogintoProject_Handler,
		},
		{
			MethodName: "AddMemberStatus",
			Handler:    _ProjectService_AddMemberStatus_Handler,
		},
		{
			MethodName: "GetAssignedTask",
			Handler:    _ProjectService_GetAssignedTask_Handler,
		},
		{
			MethodName: "DownloadTask",
			Handler:    _ProjectService_DownloadTask_Handler,
		},
		{
			MethodName: "GetProgressofMember",
			Handler:    _ProjectService_GetProgressofMember_Handler,
		},
		{
			MethodName: "GetProjectProgress",
			Handler:    _ProjectService_GetProjectProgress_Handler,
		},
		{
			MethodName: "MarkProgressofNonTechnical",
			Handler:    _ProjectService_MarkProgressofNonTechnical_Handler,
		},
		{
			MethodName: "AddTaskStatuses",
			Handler:    _ProjectService_AddTaskStatuses_Handler,
		},
		{
			MethodName: "IsMemberAccepted",
			Handler:    _ProjectService_IsMemberAccepted_Handler,
		},
		{
			MethodName: "RaiseIssue",
			Handler:    _ProjectService_RaiseIssue_Handler,
		},
		{
			MethodName: "GetIssues",
			Handler:    _ProjectService_GetIssues_Handler,
		},
		{
			MethodName: "RateTask",
			Handler:    _ProjectService_RateTask_Handler,
		},
		{
			MethodName: "GetfeedBackforTask",
			Handler:    _ProjectService_GetfeedBackforTask_Handler,
		},
		{
			MethodName: "RequestforDeadlineExtension",
			Handler:    _ProjectService_RequestforDeadlineExtension_Handler,
		},
		{
			MethodName: "GrantExtension",
			Handler:    _ProjectService_GrantExtension_Handler,
		},
		{
			MethodName: "VerifyTaskCompletion",
			Handler:    _ProjectService_VerifyTaskCompletion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProjectInvites",
			Handler:       _ProjectService_ProjectInvites_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProjectMembers",
			Handler:       _ProjectService_GetProjectMembers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProgressofMembers",
			Handler:       _ProjectService_GetProgressofMembers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLiveProjects",
			Handler:       _ProjectService_GetLiveProjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStreamofProjectDetails",
			Handler:       _ProjectService_GetStreamofProjectDetails_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCompletedMembers",
			Handler:       _ProjectService_GetCompletedMembers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCriticalMembers",
			Handler:       _ProjectService_GetCriticalMembers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetIssuesofProject",
			Handler:       _ProjectService_GetIssuesofProject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetExtensionRequests",
			Handler:       _ProjectService_GetExtensionRequests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVerifiedTasks",
			Handler:       _ProjectService_GetVerifiedTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "project.proto",
}
