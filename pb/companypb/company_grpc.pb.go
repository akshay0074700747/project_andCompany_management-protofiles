// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: company.proto

package companypb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompanyService_RegisterCompany_FullMethodName                 = "/company.CompanyService/RegisterCompany"
	CompanyService_GetCompanyTypes_FullMethodName                 = "/company.CompanyService/GetCompanyTypes"
	CompanyService_GetPermissions_FullMethodName                  = "/company.CompanyService/GetPermissions"
	CompanyService_AddEmployees_FullMethodName                    = "/company.CompanyService/AddEmployees"
	CompanyService_AttachRoleWithPermisssions_FullMethodName      = "/company.CompanyService/AttachRoleWithPermisssions"
	CompanyService_GetAttachedRoleswithPermissions_FullMethodName = "/company.CompanyService/GetAttachedRoleswithPermissions"
	CompanyService_AddCompanyTypes_FullMethodName                 = "/company.CompanyService/AddCompanyTypes"
	CompanyService_Permissions_FullMethodName                     = "/company.CompanyService/Permissions"
	CompanyService_GetCompanyDetails_FullMethodName               = "/company.CompanyService/GetCompanyDetails"
	CompanyService_GetCompanyEmployees_FullMethodName             = "/company.CompanyService/GetCompanyEmployees"
	CompanyService_LogintoCompany_FullMethodName                  = "/company.CompanyService/LogintoCompany"
	CompanyService_AddMemberStatus_FullMethodName                 = "/company.CompanyService/AddMemberStatus"
	CompanyService_GetEmployeesLeaderBoard_FullMethodName         = "/company.CompanyService/GetEmployeesLeaderBoard"
	CompanyService_SalaryIncrementofEmployee_FullMethodName       = "/company.CompanyService/SalaryIncrementofEmployee"
	CompanyService_SalaryIncrementofRole_FullMethodName           = "/company.CompanyService/SalaryIncrementofRole"
	CompanyService_GetAverageSalaryperRole_FullMethodName         = "/company.CompanyService/GetAverageSalaryperRole"
	CompanyService_GetSalaryLeaderboard_FullMethodName            = "/company.CompanyService/GetSalaryLeaderboard"
	CompanyService_RaiseProblem_FullMethodName                    = "/company.CompanyService/RaiseProblem"
	CompanyService_GetProblems_FullMethodName                     = "/company.CompanyService/GetProblems"
	CompanyService_GetProfileViews_FullMethodName                 = "/company.CompanyService/GetProfileViews"
	CompanyService_GetPopularityofCompanies_FullMethodName        = "/company.CompanyService/GetPopularityofCompanies"
	CompanyService_ListCompanies_FullMethodName                   = "/company.CompanyService/ListCompanies"
	CompanyService_GetVisitors_FullMethodName                     = "/company.CompanyService/GetVisitors"
)

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error)
	GetCompanyTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CompanyService_GetCompanyTypesClient, error)
	GetPermissions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CompanyService_GetPermissionsClient, error)
	AddEmployees(ctx context.Context, in *AddEmployeeReq, opts ...grpc.CallOption) (*empty.Empty, error)
	AttachRoleWithPermisssions(ctx context.Context, in *AttachRoleWithPermisssionsReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAttachedRoleswithPermissions(ctx context.Context, in *GetAttachedRoleswithPermissionsReq, opts ...grpc.CallOption) (CompanyService_GetAttachedRoleswithPermissionsClient, error)
	AddCompanyTypes(ctx context.Context, in *AddCompanyTypeReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Permissions(ctx context.Context, in *AddPermissionReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCompanyDetails(ctx context.Context, in *GetCompanyReq, opts ...grpc.CallOption) (*GetCompanyDetailsRes, error)
	GetCompanyEmployees(ctx context.Context, in *GetCompanyReq, opts ...grpc.CallOption) (CompanyService_GetCompanyEmployeesClient, error)
	LogintoCompany(ctx context.Context, in *LogintoCompanyReq, opts ...grpc.CallOption) (*LogintoCompanyRes, error)
	AddMemberStatus(ctx context.Context, in *MemberStatusReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetEmployeesLeaderBoard(ctx context.Context, in *GetEmployeesLeaderBoardReq, opts ...grpc.CallOption) (CompanyService_GetEmployeesLeaderBoardClient, error)
	SalaryIncrementofEmployee(ctx context.Context, in *SalaryIncrementofEmployeeReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SalaryIncrementofRole(ctx context.Context, in *SalaryIncrementofRoleReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAverageSalaryperRole(ctx context.Context, in *GetAverageSalaryperRoleReq, opts ...grpc.CallOption) (CompanyService_GetAverageSalaryperRoleClient, error)
	GetSalaryLeaderboard(ctx context.Context, in *GetSalaryLeaderboardReq, opts ...grpc.CallOption) (*GetSalaryLeaderboardRes, error)
	RaiseProblem(ctx context.Context, in *RaiseProblemReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetProblems(ctx context.Context, in *GetProblemsReq, opts ...grpc.CallOption) (CompanyService_GetProblemsClient, error)
	GetProfileViews(ctx context.Context, in *GetProfileViewsReq, opts ...grpc.CallOption) (*GetProfileViewsRes, error)
	GetPopularityofCompanies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CompanyService_GetPopularityofCompaniesClient, error)
	ListCompanies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListCompaniesRes, error)
	GetVisitors(ctx context.Context, in *GetVisitorsReq, opts ...grpc.CallOption) (CompanyService_GetVisitorsClient, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error) {
	out := new(CompanyResponce)
	err := c.cc.Invoke(ctx, CompanyService_RegisterCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CompanyService_GetCompanyTypesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[0], CompanyService_GetCompanyTypes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetCompanyTypesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetCompanyTypesClient interface {
	Recv() (*GetCompanyTypesRes, error)
	grpc.ClientStream
}

type companyServiceGetCompanyTypesClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetCompanyTypesClient) Recv() (*GetCompanyTypesRes, error) {
	m := new(GetCompanyTypesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetPermissions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CompanyService_GetPermissionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[1], CompanyService_GetPermissions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetPermissionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetPermissionsClient interface {
	Recv() (*Permission, error)
	grpc.ClientStream
}

type companyServiceGetPermissionsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetPermissionsClient) Recv() (*Permission, error) {
	m := new(Permission)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) AddEmployees(ctx context.Context, in *AddEmployeeReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AddEmployees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AttachRoleWithPermisssions(ctx context.Context, in *AttachRoleWithPermisssionsReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AttachRoleWithPermisssions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAttachedRoleswithPermissions(ctx context.Context, in *GetAttachedRoleswithPermissionsReq, opts ...grpc.CallOption) (CompanyService_GetAttachedRoleswithPermissionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[2], CompanyService_GetAttachedRoleswithPermissions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetAttachedRoleswithPermissionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetAttachedRoleswithPermissionsClient interface {
	Recv() (*GetAttachedRoleswithPermissionsRes, error)
	grpc.ClientStream
}

type companyServiceGetAttachedRoleswithPermissionsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetAttachedRoleswithPermissionsClient) Recv() (*GetAttachedRoleswithPermissionsRes, error) {
	m := new(GetAttachedRoleswithPermissionsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) AddCompanyTypes(ctx context.Context, in *AddCompanyTypeReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AddCompanyTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Permissions(ctx context.Context, in *AddPermissionReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_Permissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyDetails(ctx context.Context, in *GetCompanyReq, opts ...grpc.CallOption) (*GetCompanyDetailsRes, error) {
	out := new(GetCompanyDetailsRes)
	err := c.cc.Invoke(ctx, CompanyService_GetCompanyDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyEmployees(ctx context.Context, in *GetCompanyReq, opts ...grpc.CallOption) (CompanyService_GetCompanyEmployeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[3], CompanyService_GetCompanyEmployees_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetCompanyEmployeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetCompanyEmployeesClient interface {
	Recv() (*GetCompanyEmployeesRes, error)
	grpc.ClientStream
}

type companyServiceGetCompanyEmployeesClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetCompanyEmployeesClient) Recv() (*GetCompanyEmployeesRes, error) {
	m := new(GetCompanyEmployeesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) LogintoCompany(ctx context.Context, in *LogintoCompanyReq, opts ...grpc.CallOption) (*LogintoCompanyRes, error) {
	out := new(LogintoCompanyRes)
	err := c.cc.Invoke(ctx, CompanyService_LogintoCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AddMemberStatus(ctx context.Context, in *MemberStatusReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AddMemberStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetEmployeesLeaderBoard(ctx context.Context, in *GetEmployeesLeaderBoardReq, opts ...grpc.CallOption) (CompanyService_GetEmployeesLeaderBoardClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[4], CompanyService_GetEmployeesLeaderBoard_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetEmployeesLeaderBoardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetEmployeesLeaderBoardClient interface {
	Recv() (*GetEmployeesLeaderBoardRes, error)
	grpc.ClientStream
}

type companyServiceGetEmployeesLeaderBoardClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetEmployeesLeaderBoardClient) Recv() (*GetEmployeesLeaderBoardRes, error) {
	m := new(GetEmployeesLeaderBoardRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) SalaryIncrementofEmployee(ctx context.Context, in *SalaryIncrementofEmployeeReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_SalaryIncrementofEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) SalaryIncrementofRole(ctx context.Context, in *SalaryIncrementofRoleReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_SalaryIncrementofRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAverageSalaryperRole(ctx context.Context, in *GetAverageSalaryperRoleReq, opts ...grpc.CallOption) (CompanyService_GetAverageSalaryperRoleClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[5], CompanyService_GetAverageSalaryperRole_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetAverageSalaryperRoleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetAverageSalaryperRoleClient interface {
	Recv() (*GetAverageSalaryperRoleRes, error)
	grpc.ClientStream
}

type companyServiceGetAverageSalaryperRoleClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetAverageSalaryperRoleClient) Recv() (*GetAverageSalaryperRoleRes, error) {
	m := new(GetAverageSalaryperRoleRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetSalaryLeaderboard(ctx context.Context, in *GetSalaryLeaderboardReq, opts ...grpc.CallOption) (*GetSalaryLeaderboardRes, error) {
	out := new(GetSalaryLeaderboardRes)
	err := c.cc.Invoke(ctx, CompanyService_GetSalaryLeaderboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) RaiseProblem(ctx context.Context, in *RaiseProblemReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_RaiseProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetProblems(ctx context.Context, in *GetProblemsReq, opts ...grpc.CallOption) (CompanyService_GetProblemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[6], CompanyService_GetProblems_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetProblemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetProblemsClient interface {
	Recv() (*GetProblemsRes, error)
	grpc.ClientStream
}

type companyServiceGetProblemsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetProblemsClient) Recv() (*GetProblemsRes, error) {
	m := new(GetProblemsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetProfileViews(ctx context.Context, in *GetProfileViewsReq, opts ...grpc.CallOption) (*GetProfileViewsRes, error) {
	out := new(GetProfileViewsRes)
	err := c.cc.Invoke(ctx, CompanyService_GetProfileViews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetPopularityofCompanies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CompanyService_GetPopularityofCompaniesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[7], CompanyService_GetPopularityofCompanies_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetPopularityofCompaniesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetPopularityofCompaniesClient interface {
	Recv() (*GetPopularityofCompaniesRes, error)
	grpc.ClientStream
}

type companyServiceGetPopularityofCompaniesClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetPopularityofCompaniesClient) Recv() (*GetPopularityofCompaniesRes, error) {
	m := new(GetPopularityofCompaniesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) ListCompanies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListCompaniesRes, error) {
	out := new(ListCompaniesRes)
	err := c.cc.Invoke(ctx, CompanyService_ListCompanies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetVisitors(ctx context.Context, in *GetVisitorsReq, opts ...grpc.CallOption) (CompanyService_GetVisitorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[8], CompanyService_GetVisitors_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetVisitorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetVisitorsClient interface {
	Recv() (*GetVisitorsRes, error)
	grpc.ClientStream
}

type companyServiceGetVisitorsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetVisitorsClient) Recv() (*GetVisitorsRes, error) {
	m := new(GetVisitorsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations must embed UnimplementedCompanyServiceServer
// for forward compatibility
type CompanyServiceServer interface {
	RegisterCompany(context.Context, *RegisterCompanyRequest) (*CompanyResponce, error)
	GetCompanyTypes(*empty.Empty, CompanyService_GetCompanyTypesServer) error
	GetPermissions(*empty.Empty, CompanyService_GetPermissionsServer) error
	AddEmployees(context.Context, *AddEmployeeReq) (*empty.Empty, error)
	AttachRoleWithPermisssions(context.Context, *AttachRoleWithPermisssionsReq) (*empty.Empty, error)
	GetAttachedRoleswithPermissions(*GetAttachedRoleswithPermissionsReq, CompanyService_GetAttachedRoleswithPermissionsServer) error
	AddCompanyTypes(context.Context, *AddCompanyTypeReq) (*empty.Empty, error)
	Permissions(context.Context, *AddPermissionReq) (*empty.Empty, error)
	GetCompanyDetails(context.Context, *GetCompanyReq) (*GetCompanyDetailsRes, error)
	GetCompanyEmployees(*GetCompanyReq, CompanyService_GetCompanyEmployeesServer) error
	LogintoCompany(context.Context, *LogintoCompanyReq) (*LogintoCompanyRes, error)
	AddMemberStatus(context.Context, *MemberStatusReq) (*empty.Empty, error)
	GetEmployeesLeaderBoard(*GetEmployeesLeaderBoardReq, CompanyService_GetEmployeesLeaderBoardServer) error
	SalaryIncrementofEmployee(context.Context, *SalaryIncrementofEmployeeReq) (*empty.Empty, error)
	SalaryIncrementofRole(context.Context, *SalaryIncrementofRoleReq) (*empty.Empty, error)
	GetAverageSalaryperRole(*GetAverageSalaryperRoleReq, CompanyService_GetAverageSalaryperRoleServer) error
	GetSalaryLeaderboard(context.Context, *GetSalaryLeaderboardReq) (*GetSalaryLeaderboardRes, error)
	RaiseProblem(context.Context, *RaiseProblemReq) (*empty.Empty, error)
	GetProblems(*GetProblemsReq, CompanyService_GetProblemsServer) error
	GetProfileViews(context.Context, *GetProfileViewsReq) (*GetProfileViewsRes, error)
	GetPopularityofCompanies(*empty.Empty, CompanyService_GetPopularityofCompaniesServer) error
	ListCompanies(context.Context, *empty.Empty) (*ListCompaniesRes, error)
	GetVisitors(*GetVisitorsReq, CompanyService_GetVisitorsServer) error
	mustEmbedUnimplementedCompanyServiceServer()
}

// UnimplementedCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (UnimplementedCompanyServiceServer) RegisterCompany(context.Context, *RegisterCompanyRequest) (*CompanyResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCompany not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyTypes(*empty.Empty, CompanyService_GetCompanyTypesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCompanyTypes not implemented")
}
func (UnimplementedCompanyServiceServer) GetPermissions(*empty.Empty, CompanyService_GetPermissionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedCompanyServiceServer) AddEmployees(context.Context, *AddEmployeeReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmployees not implemented")
}
func (UnimplementedCompanyServiceServer) AttachRoleWithPermisssions(context.Context, *AttachRoleWithPermisssionsReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachRoleWithPermisssions not implemented")
}
func (UnimplementedCompanyServiceServer) GetAttachedRoleswithPermissions(*GetAttachedRoleswithPermissionsReq, CompanyService_GetAttachedRoleswithPermissionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAttachedRoleswithPermissions not implemented")
}
func (UnimplementedCompanyServiceServer) AddCompanyTypes(context.Context, *AddCompanyTypeReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompanyTypes not implemented")
}
func (UnimplementedCompanyServiceServer) Permissions(context.Context, *AddPermissionReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Permissions not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyDetails(context.Context, *GetCompanyReq) (*GetCompanyDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyDetails not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyEmployees(*GetCompanyReq, CompanyService_GetCompanyEmployeesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCompanyEmployees not implemented")
}
func (UnimplementedCompanyServiceServer) LogintoCompany(context.Context, *LogintoCompanyReq) (*LogintoCompanyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogintoCompany not implemented")
}
func (UnimplementedCompanyServiceServer) AddMemberStatus(context.Context, *MemberStatusReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberStatus not implemented")
}
func (UnimplementedCompanyServiceServer) GetEmployeesLeaderBoard(*GetEmployeesLeaderBoardReq, CompanyService_GetEmployeesLeaderBoardServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEmployeesLeaderBoard not implemented")
}
func (UnimplementedCompanyServiceServer) SalaryIncrementofEmployee(context.Context, *SalaryIncrementofEmployeeReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalaryIncrementofEmployee not implemented")
}
func (UnimplementedCompanyServiceServer) SalaryIncrementofRole(context.Context, *SalaryIncrementofRoleReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalaryIncrementofRole not implemented")
}
func (UnimplementedCompanyServiceServer) GetAverageSalaryperRole(*GetAverageSalaryperRoleReq, CompanyService_GetAverageSalaryperRoleServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAverageSalaryperRole not implemented")
}
func (UnimplementedCompanyServiceServer) GetSalaryLeaderboard(context.Context, *GetSalaryLeaderboardReq) (*GetSalaryLeaderboardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalaryLeaderboard not implemented")
}
func (UnimplementedCompanyServiceServer) RaiseProblem(context.Context, *RaiseProblemReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaiseProblem not implemented")
}
func (UnimplementedCompanyServiceServer) GetProblems(*GetProblemsReq, CompanyService_GetProblemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProblems not implemented")
}
func (UnimplementedCompanyServiceServer) GetProfileViews(context.Context, *GetProfileViewsReq) (*GetProfileViewsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileViews not implemented")
}
func (UnimplementedCompanyServiceServer) GetPopularityofCompanies(*empty.Empty, CompanyService_GetPopularityofCompaniesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPopularityofCompanies not implemented")
}
func (UnimplementedCompanyServiceServer) ListCompanies(context.Context, *empty.Empty) (*ListCompaniesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanies not implemented")
}
func (UnimplementedCompanyServiceServer) GetVisitors(*GetVisitorsReq, CompanyService_GetVisitorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVisitors not implemented")
}
func (UnimplementedCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s grpc.ServiceRegistrar, srv CompanyServiceServer) {
	s.RegisterService(&CompanyService_ServiceDesc, srv)
}

func _CompanyService_RegisterCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).RegisterCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_RegisterCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).RegisterCompany(ctx, req.(*RegisterCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyTypes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetCompanyTypes(m, &companyServiceGetCompanyTypesServer{stream})
}

type CompanyService_GetCompanyTypesServer interface {
	Send(*GetCompanyTypesRes) error
	grpc.ServerStream
}

type companyServiceGetCompanyTypesServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetCompanyTypesServer) Send(m *GetCompanyTypesRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetPermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetPermissions(m, &companyServiceGetPermissionsServer{stream})
}

type CompanyService_GetPermissionsServer interface {
	Send(*Permission) error
	grpc.ServerStream
}

type companyServiceGetPermissionsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetPermissionsServer) Send(m *Permission) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_AddEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AddEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddEmployees(ctx, req.(*AddEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AttachRoleWithPermisssions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachRoleWithPermisssionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AttachRoleWithPermisssions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AttachRoleWithPermisssions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AttachRoleWithPermisssions(ctx, req.(*AttachRoleWithPermisssionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAttachedRoleswithPermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAttachedRoleswithPermissionsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetAttachedRoleswithPermissions(m, &companyServiceGetAttachedRoleswithPermissionsServer{stream})
}

type CompanyService_GetAttachedRoleswithPermissionsServer interface {
	Send(*GetAttachedRoleswithPermissionsRes) error
	grpc.ServerStream
}

type companyServiceGetAttachedRoleswithPermissionsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetAttachedRoleswithPermissionsServer) Send(m *GetAttachedRoleswithPermissionsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_AddCompanyTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompanyTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddCompanyTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AddCompanyTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddCompanyTypes(ctx, req.(*AddCompanyTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Permissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Permissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_Permissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Permissions(ctx, req.(*AddPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetCompanyDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyDetails(ctx, req.(*GetCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyEmployees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCompanyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetCompanyEmployees(m, &companyServiceGetCompanyEmployeesServer{stream})
}

type CompanyService_GetCompanyEmployeesServer interface {
	Send(*GetCompanyEmployeesRes) error
	grpc.ServerStream
}

type companyServiceGetCompanyEmployeesServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetCompanyEmployeesServer) Send(m *GetCompanyEmployeesRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_LogintoCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogintoCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).LogintoCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_LogintoCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).LogintoCompany(ctx, req.(*LogintoCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AddMemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddMemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AddMemberStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddMemberStatus(ctx, req.(*MemberStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetEmployeesLeaderBoard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEmployeesLeaderBoardReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetEmployeesLeaderBoard(m, &companyServiceGetEmployeesLeaderBoardServer{stream})
}

type CompanyService_GetEmployeesLeaderBoardServer interface {
	Send(*GetEmployeesLeaderBoardRes) error
	grpc.ServerStream
}

type companyServiceGetEmployeesLeaderBoardServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetEmployeesLeaderBoardServer) Send(m *GetEmployeesLeaderBoardRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_SalaryIncrementofEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalaryIncrementofEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).SalaryIncrementofEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_SalaryIncrementofEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).SalaryIncrementofEmployee(ctx, req.(*SalaryIncrementofEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_SalaryIncrementofRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalaryIncrementofRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).SalaryIncrementofRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_SalaryIncrementofRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).SalaryIncrementofRole(ctx, req.(*SalaryIncrementofRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAverageSalaryperRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAverageSalaryperRoleReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetAverageSalaryperRole(m, &companyServiceGetAverageSalaryperRoleServer{stream})
}

type CompanyService_GetAverageSalaryperRoleServer interface {
	Send(*GetAverageSalaryperRoleRes) error
	grpc.ServerStream
}

type companyServiceGetAverageSalaryperRoleServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetAverageSalaryperRoleServer) Send(m *GetAverageSalaryperRoleRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetSalaryLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalaryLeaderboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetSalaryLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetSalaryLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetSalaryLeaderboard(ctx, req.(*GetSalaryLeaderboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_RaiseProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaiseProblemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).RaiseProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_RaiseProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).RaiseProblem(ctx, req.(*RaiseProblemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetProblems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProblemsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetProblems(m, &companyServiceGetProblemsServer{stream})
}

type CompanyService_GetProblemsServer interface {
	Send(*GetProblemsRes) error
	grpc.ServerStream
}

type companyServiceGetProblemsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetProblemsServer) Send(m *GetProblemsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetProfileViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileViewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetProfileViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetProfileViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetProfileViews(ctx, req.(*GetProfileViewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetPopularityofCompanies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetPopularityofCompanies(m, &companyServiceGetPopularityofCompaniesServer{stream})
}

type CompanyService_GetPopularityofCompaniesServer interface {
	Send(*GetPopularityofCompaniesRes) error
	grpc.ServerStream
}

type companyServiceGetPopularityofCompaniesServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetPopularityofCompaniesServer) Send(m *GetPopularityofCompaniesRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_ListCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListCompanies(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetVisitors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVisitorsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetVisitors(m, &companyServiceGetVisitorsServer{stream})
}

type CompanyService_GetVisitorsServer interface {
	Send(*GetVisitorsRes) error
	grpc.ServerStream
}

type companyServiceGetVisitorsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetVisitorsServer) Send(m *GetVisitorsRes) error {
	return x.ServerStream.SendMsg(m)
}

// CompanyService_ServiceDesc is the grpc.ServiceDesc for CompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCompany",
			Handler:    _CompanyService_RegisterCompany_Handler,
		},
		{
			MethodName: "AddEmployees",
			Handler:    _CompanyService_AddEmployees_Handler,
		},
		{
			MethodName: "AttachRoleWithPermisssions",
			Handler:    _CompanyService_AttachRoleWithPermisssions_Handler,
		},
		{
			MethodName: "AddCompanyTypes",
			Handler:    _CompanyService_AddCompanyTypes_Handler,
		},
		{
			MethodName: "Permissions",
			Handler:    _CompanyService_Permissions_Handler,
		},
		{
			MethodName: "GetCompanyDetails",
			Handler:    _CompanyService_GetCompanyDetails_Handler,
		},
		{
			MethodName: "LogintoCompany",
			Handler:    _CompanyService_LogintoCompany_Handler,
		},
		{
			MethodName: "AddMemberStatus",
			Handler:    _CompanyService_AddMemberStatus_Handler,
		},
		{
			MethodName: "SalaryIncrementofEmployee",
			Handler:    _CompanyService_SalaryIncrementofEmployee_Handler,
		},
		{
			MethodName: "SalaryIncrementofRole",
			Handler:    _CompanyService_SalaryIncrementofRole_Handler,
		},
		{
			MethodName: "GetSalaryLeaderboard",
			Handler:    _CompanyService_GetSalaryLeaderboard_Handler,
		},
		{
			MethodName: "RaiseProblem",
			Handler:    _CompanyService_RaiseProblem_Handler,
		},
		{
			MethodName: "GetProfileViews",
			Handler:    _CompanyService_GetProfileViews_Handler,
		},
		{
			MethodName: "ListCompanies",
			Handler:    _CompanyService_ListCompanies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCompanyTypes",
			Handler:       _CompanyService_GetCompanyTypes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPermissions",
			Handler:       _CompanyService_GetPermissions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAttachedRoleswithPermissions",
			Handler:       _CompanyService_GetAttachedRoleswithPermissions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCompanyEmployees",
			Handler:       _CompanyService_GetCompanyEmployees_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEmployeesLeaderBoard",
			Handler:       _CompanyService_GetEmployeesLeaderBoard_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAverageSalaryperRole",
			Handler:       _CompanyService_GetAverageSalaryperRole_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProblems",
			Handler:       _CompanyService_GetProblems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPopularityofCompanies",
			Handler:       _CompanyService_GetPopularityofCompanies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVisitors",
			Handler:       _CompanyService_GetVisitors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "company.proto",
}
