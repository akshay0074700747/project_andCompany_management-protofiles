// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: company.proto

package companypb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompanyService_RegisterCompany_FullMethodName                 = "/company.CompanyService/RegisterCompany"
	CompanyService_GetCompanyTypes_FullMethodName                 = "/company.CompanyService/GetCompanyTypes"
	CompanyService_GetPermissions_FullMethodName                  = "/company.CompanyService/GetPermissions"
	CompanyService_AddEmployees_FullMethodName                    = "/company.CompanyService/AddEmployees"
	CompanyService_AttachRoleWithPermisssions_FullMethodName      = "/company.CompanyService/AttachRoleWithPermisssions"
	CompanyService_GetAttachedRoleswithPermissions_FullMethodName = "/company.CompanyService/GetAttachedRoleswithPermissions"
	CompanyService_AddCompanyTypes_FullMethodName                 = "/company.CompanyService/AddCompanyTypes"
	CompanyService_Permissions_FullMethodName                     = "/company.CompanyService/Permissions"
	CompanyService_GetCompanyDetails_FullMethodName               = "/company.CompanyService/GetCompanyDetails"
	CompanyService_GetCompanyEmployees_FullMethodName             = "/company.CompanyService/GetCompanyEmployees"
	CompanyService_LogintoCompany_FullMethodName                  = "/company.CompanyService/LogintoCompany"
	CompanyService_AddMemberStatus_FullMethodName                 = "/company.CompanyService/AddMemberStatus"
	CompanyService_SalaryIncrementofEmployee_FullMethodName       = "/company.CompanyService/SalaryIncrementofEmployee"
	CompanyService_SalaryIncrementofRole_FullMethodName           = "/company.CompanyService/SalaryIncrementofRole"
	CompanyService_GetAverageSalaryperRole_FullMethodName         = "/company.CompanyService/GetAverageSalaryperRole"
	CompanyService_GetSalaryLeaderboard_FullMethodName            = "/company.CompanyService/GetSalaryLeaderboard"
	CompanyService_RaiseProblem_FullMethodName                    = "/company.CompanyService/RaiseProblem"
	CompanyService_GetProblems_FullMethodName                     = "/company.CompanyService/GetProblems"
	CompanyService_GetProfileViews_FullMethodName                 = "/company.CompanyService/GetProfileViews"
	CompanyService_GetVisitors_FullMethodName                     = "/company.CompanyService/GetVisitors"
	CompanyService_GetPermission_FullMethodName                   = "/company.CompanyService/GetPermission"
	CompanyService_IsEmployeeExists_FullMethodName                = "/company.CompanyService/IsEmployeeExists"
	CompanyService_AddClient_FullMethodName                       = "/company.CompanyService/AddClient"
	CompanyService_AssociateClientWithProject_FullMethodName      = "/company.CompanyService/AssociateClientWithProject"
	CompanyService_GetPastProjects_FullMethodName                 = "/company.CompanyService/GetPastProjects"
	CompanyService_GetClients_FullMethodName                      = "/company.CompanyService/GetClients"
	CompanyService_GetRevenueGenerated_FullMethodName             = "/company.CompanyService/GetRevenueGenerated"
	CompanyService_UpdateRevenueStatus_FullMethodName             = "/company.CompanyService/UpdateRevenueStatus"
	CompanyService_AttachCompanyPolicies_FullMethodName           = "/company.CompanyService/AttachCompanyPolicies"
	CompanyService_UpdatePaymentStatusofEmployee_FullMethodName   = "/company.CompanyService/UpdatePaymentStatusofEmployee"
	CompanyService_AssignProblem_FullMethodName                   = "/company.CompanyService/AssignProblem"
	CompanyService_ResolveProblem_FullMethodName                  = "/company.CompanyService/ResolveProblem"
	CompanyService_ApplyForLeave_FullMethodName                   = "/company.CompanyService/ApplyForLeave"
	CompanyService_GetEmployeeLeaveRequests_FullMethodName        = "/company.CompanyService/GetEmployeeLeaveRequests"
	CompanyService_DecideEmployeeLeave_FullMethodName             = "/company.CompanyService/DecideEmployeeLeave"
	CompanyService_GetLeaves_FullMethodName                       = "/company.CompanyService/GetLeaves"
	CompanyService_GetStreamofClients_FullMethodName              = "/company.CompanyService/GetStreamofClients"
	CompanyService_PostJobs_FullMethodName                        = "/company.CompanyService/PostJobs"
	CompanyService_GetJobsofCompany_FullMethodName                = "/company.CompanyService/GetJobsofCompany"
	CompanyService_GetJobApplications_FullMethodName              = "/company.CompanyService/GetJobApplications"
	CompanyService_ShortlistApplications_FullMethodName           = "/company.CompanyService/ShortlistApplications"
	CompanyService_ScheduleInterview_FullMethodName               = "/company.CompanyService/ScheduleInterview"
	CompanyService_GetScheduledInterviews_FullMethodName          = "/company.CompanyService/GetScheduledInterviews"
	CompanyService_GetDetailsofApplicationByID_FullMethodName     = "/company.CompanyService/GetDetailsofApplicationByID"
	CompanyService_GetScheduledInterviewsofUser_FullMethodName    = "/company.CompanyService/GetScheduledInterviewsofUser"
	CompanyService_RescheduleInterview_FullMethodName             = "/company.CompanyService/RescheduleInterview"
	CompanyService_GetShortlistedApplications_FullMethodName      = "/company.CompanyService/GetShortlistedApplications"
	CompanyService_GetJobs_FullMethodName                         = "/company.CompanyService/GetJobs"
	CompanyService_GetAllJobApplicationsofUser_FullMethodName     = "/company.CompanyService/GetAllJobApplicationsofUser"
)

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error)
	GetCompanyTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CompanyService_GetCompanyTypesClient, error)
	GetPermissions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CompanyService_GetPermissionsClient, error)
	AddEmployees(ctx context.Context, in *AddEmployeeReq, opts ...grpc.CallOption) (*empty.Empty, error)
	AttachRoleWithPermisssions(ctx context.Context, in *AttachRoleWithPermisssionsReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAttachedRoleswithPermissions(ctx context.Context, in *GetAttachedRoleswithPermissionsReq, opts ...grpc.CallOption) (CompanyService_GetAttachedRoleswithPermissionsClient, error)
	AddCompanyTypes(ctx context.Context, in *AddCompanyTypeReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Permissions(ctx context.Context, in *AddPermissionReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCompanyDetails(ctx context.Context, in *GetCompanyReq, opts ...grpc.CallOption) (*GetCompanyDetailsRes, error)
	GetCompanyEmployees(ctx context.Context, in *GetCompanyReq, opts ...grpc.CallOption) (CompanyService_GetCompanyEmployeesClient, error)
	LogintoCompany(ctx context.Context, in *LogintoCompanyReq, opts ...grpc.CallOption) (*LogintoCompanyRes, error)
	AddMemberStatus(ctx context.Context, in *MemberStatusReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SalaryIncrementofEmployee(ctx context.Context, in *SalaryIncrementofEmployeeReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SalaryIncrementofRole(ctx context.Context, in *SalaryIncrementofRoleReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAverageSalaryperRole(ctx context.Context, in *GetAverageSalaryperRoleReq, opts ...grpc.CallOption) (CompanyService_GetAverageSalaryperRoleClient, error)
	GetSalaryLeaderboard(ctx context.Context, in *GetSalaryLeaderboardReq, opts ...grpc.CallOption) (CompanyService_GetSalaryLeaderboardClient, error)
	RaiseProblem(ctx context.Context, in *RaiseProblemReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetProblems(ctx context.Context, in *GetProblemsReq, opts ...grpc.CallOption) (CompanyService_GetProblemsClient, error)
	GetProfileViews(ctx context.Context, in *GetProfileViewsReq, opts ...grpc.CallOption) (*GetProfileViewsRes, error)
	GetVisitors(ctx context.Context, in *GetVisitorsReq, opts ...grpc.CallOption) (CompanyService_GetVisitorsClient, error)
	GetPermission(ctx context.Context, in *GetPermisssionReq, opts ...grpc.CallOption) (*GetPermisssionRes, error)
	IsEmployeeExists(ctx context.Context, in *IsEmployeeExistsReq, opts ...grpc.CallOption) (*IsEmployeeExistsRes, error)
	AddClient(ctx context.Context, in *AddClientReq, opts ...grpc.CallOption) (*empty.Empty, error)
	AssociateClientWithProject(ctx context.Context, in *AssociateClientWithProjectReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPastProjects(ctx context.Context, in *GetProjectsReq, opts ...grpc.CallOption) (CompanyService_GetPastProjectsClient, error)
	GetClients(ctx context.Context, in *GetClientsReq, opts ...grpc.CallOption) (CompanyService_GetClientsClient, error)
	GetRevenueGenerated(ctx context.Context, in *GetRevenueGeneratedReq, opts ...grpc.CallOption) (CompanyService_GetRevenueGeneratedClient, error)
	UpdateRevenueStatus(ctx context.Context, in *UpdateRevenueStatusReq, opts ...grpc.CallOption) (*empty.Empty, error)
	AttachCompanyPolicies(ctx context.Context, in *AttachCompanyPoliciesReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePaymentStatusofEmployee(ctx context.Context, in *UpdatePaymentStatusofEmployeeReq, opts ...grpc.CallOption) (*empty.Empty, error)
	AssignProblem(ctx context.Context, in *AssignProblemReq, opts ...grpc.CallOption) (*empty.Empty, error)
	ResolveProblem(ctx context.Context, in *ResolveProblemReq, opts ...grpc.CallOption) (*empty.Empty, error)
	ApplyForLeave(ctx context.Context, in *ApplyForLeaveReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetEmployeeLeaveRequests(ctx context.Context, in *GetEmployeeLeaveRequestsReq, opts ...grpc.CallOption) (CompanyService_GetEmployeeLeaveRequestsClient, error)
	DecideEmployeeLeave(ctx context.Context, in *DecideEmployeeLeaveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLeaves(ctx context.Context, in *GetLeavesReq, opts ...grpc.CallOption) (CompanyService_GetLeavesClient, error)
	GetStreamofClients(ctx context.Context, opts ...grpc.CallOption) (CompanyService_GetStreamofClientsClient, error)
	PostJobs(ctx context.Context, in *PostJobsReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetJobsofCompany(ctx context.Context, in *GetJobsofCompanyReq, opts ...grpc.CallOption) (CompanyService_GetJobsofCompanyClient, error)
	GetJobApplications(ctx context.Context, in *GetJobApplicationsReq, opts ...grpc.CallOption) (CompanyService_GetJobApplicationsClient, error)
	ShortlistApplications(ctx context.Context, in *ShortlistApplicationsReq, opts ...grpc.CallOption) (*empty.Empty, error)
	ScheduleInterview(ctx context.Context, in *ScheduleInterviewReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetScheduledInterviews(ctx context.Context, in *GetScheduledInterviewsReq, opts ...grpc.CallOption) (CompanyService_GetScheduledInterviewsClient, error)
	GetDetailsofApplicationByID(ctx context.Context, in *GetDetailsofApplicationByIDReq, opts ...grpc.CallOption) (*GetDetailsofApplicationByIDRes, error)
	GetScheduledInterviewsofUser(ctx context.Context, in *GetScheduledInterviewsofUserReq, opts ...grpc.CallOption) (*GetScheduledInterviewsofUserRes, error)
	RescheduleInterview(ctx context.Context, in *RescheduleInterviewReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetShortlistedApplications(ctx context.Context, in *GetShortlistedApplicationsReq, opts ...grpc.CallOption) (CompanyService_GetShortlistedApplicationsClient, error)
	GetJobs(ctx context.Context, in *GetJobsReq, opts ...grpc.CallOption) (CompanyService_GetJobsClient, error)
	GetAllJobApplicationsofUser(ctx context.Context, in *GetAllJobApplicationsofUserReq, opts ...grpc.CallOption) (*GetAllJobApplicationsofUserRes, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*CompanyResponce, error) {
	out := new(CompanyResponce)
	err := c.cc.Invoke(ctx, CompanyService_RegisterCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CompanyService_GetCompanyTypesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[0], CompanyService_GetCompanyTypes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetCompanyTypesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetCompanyTypesClient interface {
	Recv() (*GetCompanyTypesRes, error)
	grpc.ClientStream
}

type companyServiceGetCompanyTypesClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetCompanyTypesClient) Recv() (*GetCompanyTypesRes, error) {
	m := new(GetCompanyTypesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetPermissions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CompanyService_GetPermissionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[1], CompanyService_GetPermissions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetPermissionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetPermissionsClient interface {
	Recv() (*Permission, error)
	grpc.ClientStream
}

type companyServiceGetPermissionsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetPermissionsClient) Recv() (*Permission, error) {
	m := new(Permission)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) AddEmployees(ctx context.Context, in *AddEmployeeReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AddEmployees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AttachRoleWithPermisssions(ctx context.Context, in *AttachRoleWithPermisssionsReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AttachRoleWithPermisssions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAttachedRoleswithPermissions(ctx context.Context, in *GetAttachedRoleswithPermissionsReq, opts ...grpc.CallOption) (CompanyService_GetAttachedRoleswithPermissionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[2], CompanyService_GetAttachedRoleswithPermissions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetAttachedRoleswithPermissionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetAttachedRoleswithPermissionsClient interface {
	Recv() (*GetAttachedRoleswithPermissionsRes, error)
	grpc.ClientStream
}

type companyServiceGetAttachedRoleswithPermissionsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetAttachedRoleswithPermissionsClient) Recv() (*GetAttachedRoleswithPermissionsRes, error) {
	m := new(GetAttachedRoleswithPermissionsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) AddCompanyTypes(ctx context.Context, in *AddCompanyTypeReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AddCompanyTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Permissions(ctx context.Context, in *AddPermissionReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_Permissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyDetails(ctx context.Context, in *GetCompanyReq, opts ...grpc.CallOption) (*GetCompanyDetailsRes, error) {
	out := new(GetCompanyDetailsRes)
	err := c.cc.Invoke(ctx, CompanyService_GetCompanyDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyEmployees(ctx context.Context, in *GetCompanyReq, opts ...grpc.CallOption) (CompanyService_GetCompanyEmployeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[3], CompanyService_GetCompanyEmployees_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetCompanyEmployeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetCompanyEmployeesClient interface {
	Recv() (*GetCompanyEmployeesRes, error)
	grpc.ClientStream
}

type companyServiceGetCompanyEmployeesClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetCompanyEmployeesClient) Recv() (*GetCompanyEmployeesRes, error) {
	m := new(GetCompanyEmployeesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) LogintoCompany(ctx context.Context, in *LogintoCompanyReq, opts ...grpc.CallOption) (*LogintoCompanyRes, error) {
	out := new(LogintoCompanyRes)
	err := c.cc.Invoke(ctx, CompanyService_LogintoCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AddMemberStatus(ctx context.Context, in *MemberStatusReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AddMemberStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) SalaryIncrementofEmployee(ctx context.Context, in *SalaryIncrementofEmployeeReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_SalaryIncrementofEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) SalaryIncrementofRole(ctx context.Context, in *SalaryIncrementofRoleReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_SalaryIncrementofRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAverageSalaryperRole(ctx context.Context, in *GetAverageSalaryperRoleReq, opts ...grpc.CallOption) (CompanyService_GetAverageSalaryperRoleClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[4], CompanyService_GetAverageSalaryperRole_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetAverageSalaryperRoleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetAverageSalaryperRoleClient interface {
	Recv() (*GetAverageSalaryperRoleRes, error)
	grpc.ClientStream
}

type companyServiceGetAverageSalaryperRoleClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetAverageSalaryperRoleClient) Recv() (*GetAverageSalaryperRoleRes, error) {
	m := new(GetAverageSalaryperRoleRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetSalaryLeaderboard(ctx context.Context, in *GetSalaryLeaderboardReq, opts ...grpc.CallOption) (CompanyService_GetSalaryLeaderboardClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[5], CompanyService_GetSalaryLeaderboard_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetSalaryLeaderboardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetSalaryLeaderboardClient interface {
	Recv() (*GetSalaryLeaderboardRes, error)
	grpc.ClientStream
}

type companyServiceGetSalaryLeaderboardClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetSalaryLeaderboardClient) Recv() (*GetSalaryLeaderboardRes, error) {
	m := new(GetSalaryLeaderboardRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) RaiseProblem(ctx context.Context, in *RaiseProblemReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_RaiseProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetProblems(ctx context.Context, in *GetProblemsReq, opts ...grpc.CallOption) (CompanyService_GetProblemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[6], CompanyService_GetProblems_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetProblemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetProblemsClient interface {
	Recv() (*GetProblemsRes, error)
	grpc.ClientStream
}

type companyServiceGetProblemsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetProblemsClient) Recv() (*GetProblemsRes, error) {
	m := new(GetProblemsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetProfileViews(ctx context.Context, in *GetProfileViewsReq, opts ...grpc.CallOption) (*GetProfileViewsRes, error) {
	out := new(GetProfileViewsRes)
	err := c.cc.Invoke(ctx, CompanyService_GetProfileViews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetVisitors(ctx context.Context, in *GetVisitorsReq, opts ...grpc.CallOption) (CompanyService_GetVisitorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[7], CompanyService_GetVisitors_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetVisitorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetVisitorsClient interface {
	Recv() (*GetVisitorsRes, error)
	grpc.ClientStream
}

type companyServiceGetVisitorsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetVisitorsClient) Recv() (*GetVisitorsRes, error) {
	m := new(GetVisitorsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetPermission(ctx context.Context, in *GetPermisssionReq, opts ...grpc.CallOption) (*GetPermisssionRes, error) {
	out := new(GetPermisssionRes)
	err := c.cc.Invoke(ctx, CompanyService_GetPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) IsEmployeeExists(ctx context.Context, in *IsEmployeeExistsReq, opts ...grpc.CallOption) (*IsEmployeeExistsRes, error) {
	out := new(IsEmployeeExistsRes)
	err := c.cc.Invoke(ctx, CompanyService_IsEmployeeExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AddClient(ctx context.Context, in *AddClientReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AddClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AssociateClientWithProject(ctx context.Context, in *AssociateClientWithProjectReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AssociateClientWithProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetPastProjects(ctx context.Context, in *GetProjectsReq, opts ...grpc.CallOption) (CompanyService_GetPastProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[8], CompanyService_GetPastProjects_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetPastProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetPastProjectsClient interface {
	Recv() (*GetProjectsRes, error)
	grpc.ClientStream
}

type companyServiceGetPastProjectsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetPastProjectsClient) Recv() (*GetProjectsRes, error) {
	m := new(GetProjectsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetClients(ctx context.Context, in *GetClientsReq, opts ...grpc.CallOption) (CompanyService_GetClientsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[9], CompanyService_GetClients_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetClientsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetClientsClient interface {
	Recv() (*GetClientsRes, error)
	grpc.ClientStream
}

type companyServiceGetClientsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetClientsClient) Recv() (*GetClientsRes, error) {
	m := new(GetClientsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetRevenueGenerated(ctx context.Context, in *GetRevenueGeneratedReq, opts ...grpc.CallOption) (CompanyService_GetRevenueGeneratedClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[10], CompanyService_GetRevenueGenerated_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetRevenueGeneratedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetRevenueGeneratedClient interface {
	Recv() (*GetRevenueGeneratedRes, error)
	grpc.ClientStream
}

type companyServiceGetRevenueGeneratedClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetRevenueGeneratedClient) Recv() (*GetRevenueGeneratedRes, error) {
	m := new(GetRevenueGeneratedRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) UpdateRevenueStatus(ctx context.Context, in *UpdateRevenueStatusReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_UpdateRevenueStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AttachCompanyPolicies(ctx context.Context, in *AttachCompanyPoliciesReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AttachCompanyPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdatePaymentStatusofEmployee(ctx context.Context, in *UpdatePaymentStatusofEmployeeReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_UpdatePaymentStatusofEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AssignProblem(ctx context.Context, in *AssignProblemReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_AssignProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ResolveProblem(ctx context.Context, in *ResolveProblemReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_ResolveProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ApplyForLeave(ctx context.Context, in *ApplyForLeaveReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_ApplyForLeave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetEmployeeLeaveRequests(ctx context.Context, in *GetEmployeeLeaveRequestsReq, opts ...grpc.CallOption) (CompanyService_GetEmployeeLeaveRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[11], CompanyService_GetEmployeeLeaveRequests_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetEmployeeLeaveRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetEmployeeLeaveRequestsClient interface {
	Recv() (*GetEmployeeLeaveRequestsRes, error)
	grpc.ClientStream
}

type companyServiceGetEmployeeLeaveRequestsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetEmployeeLeaveRequestsClient) Recv() (*GetEmployeeLeaveRequestsRes, error) {
	m := new(GetEmployeeLeaveRequestsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) DecideEmployeeLeave(ctx context.Context, in *DecideEmployeeLeaveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_DecideEmployeeLeave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetLeaves(ctx context.Context, in *GetLeavesReq, opts ...grpc.CallOption) (CompanyService_GetLeavesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[12], CompanyService_GetLeaves_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetLeavesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetLeavesClient interface {
	Recv() (*GetLeavesRes, error)
	grpc.ClientStream
}

type companyServiceGetLeavesClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetLeavesClient) Recv() (*GetLeavesRes, error) {
	m := new(GetLeavesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetStreamofClients(ctx context.Context, opts ...grpc.CallOption) (CompanyService_GetStreamofClientsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[13], CompanyService_GetStreamofClients_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetStreamofClientsClient{stream}
	return x, nil
}

type CompanyService_GetStreamofClientsClient interface {
	Send(*GetStreamofClientsReq) error
	Recv() (*GetStreamofClientsRes, error)
	grpc.ClientStream
}

type companyServiceGetStreamofClientsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetStreamofClientsClient) Send(m *GetStreamofClientsReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *companyServiceGetStreamofClientsClient) Recv() (*GetStreamofClientsRes, error) {
	m := new(GetStreamofClientsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) PostJobs(ctx context.Context, in *PostJobsReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_PostJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetJobsofCompany(ctx context.Context, in *GetJobsofCompanyReq, opts ...grpc.CallOption) (CompanyService_GetJobsofCompanyClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[14], CompanyService_GetJobsofCompany_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetJobsofCompanyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetJobsofCompanyClient interface {
	Recv() (*GetJobsofCompanyRes, error)
	grpc.ClientStream
}

type companyServiceGetJobsofCompanyClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetJobsofCompanyClient) Recv() (*GetJobsofCompanyRes, error) {
	m := new(GetJobsofCompanyRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetJobApplications(ctx context.Context, in *GetJobApplicationsReq, opts ...grpc.CallOption) (CompanyService_GetJobApplicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[15], CompanyService_GetJobApplications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetJobApplicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetJobApplicationsClient interface {
	Recv() (*GetJobApplicationsRes, error)
	grpc.ClientStream
}

type companyServiceGetJobApplicationsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetJobApplicationsClient) Recv() (*GetJobApplicationsRes, error) {
	m := new(GetJobApplicationsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) ShortlistApplications(ctx context.Context, in *ShortlistApplicationsReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_ShortlistApplications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ScheduleInterview(ctx context.Context, in *ScheduleInterviewReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_ScheduleInterview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetScheduledInterviews(ctx context.Context, in *GetScheduledInterviewsReq, opts ...grpc.CallOption) (CompanyService_GetScheduledInterviewsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[16], CompanyService_GetScheduledInterviews_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetScheduledInterviewsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetScheduledInterviewsClient interface {
	Recv() (*GetScheduledInterviewsRes, error)
	grpc.ClientStream
}

type companyServiceGetScheduledInterviewsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetScheduledInterviewsClient) Recv() (*GetScheduledInterviewsRes, error) {
	m := new(GetScheduledInterviewsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetDetailsofApplicationByID(ctx context.Context, in *GetDetailsofApplicationByIDReq, opts ...grpc.CallOption) (*GetDetailsofApplicationByIDRes, error) {
	out := new(GetDetailsofApplicationByIDRes)
	err := c.cc.Invoke(ctx, CompanyService_GetDetailsofApplicationByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetScheduledInterviewsofUser(ctx context.Context, in *GetScheduledInterviewsofUserReq, opts ...grpc.CallOption) (*GetScheduledInterviewsofUserRes, error) {
	out := new(GetScheduledInterviewsofUserRes)
	err := c.cc.Invoke(ctx, CompanyService_GetScheduledInterviewsofUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) RescheduleInterview(ctx context.Context, in *RescheduleInterviewReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CompanyService_RescheduleInterview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetShortlistedApplications(ctx context.Context, in *GetShortlistedApplicationsReq, opts ...grpc.CallOption) (CompanyService_GetShortlistedApplicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[17], CompanyService_GetShortlistedApplications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetShortlistedApplicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetShortlistedApplicationsClient interface {
	Recv() (*GetShortlistedApplicationsRes, error)
	grpc.ClientStream
}

type companyServiceGetShortlistedApplicationsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetShortlistedApplicationsClient) Recv() (*GetShortlistedApplicationsRes, error) {
	m := new(GetShortlistedApplicationsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetJobs(ctx context.Context, in *GetJobsReq, opts ...grpc.CallOption) (CompanyService_GetJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompanyService_ServiceDesc.Streams[18], CompanyService_GetJobs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceGetJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_GetJobsClient interface {
	Recv() (*GetJobsRes, error)
	grpc.ClientStream
}

type companyServiceGetJobsClient struct {
	grpc.ClientStream
}

func (x *companyServiceGetJobsClient) Recv() (*GetJobsRes, error) {
	m := new(GetJobsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyServiceClient) GetAllJobApplicationsofUser(ctx context.Context, in *GetAllJobApplicationsofUserReq, opts ...grpc.CallOption) (*GetAllJobApplicationsofUserRes, error) {
	out := new(GetAllJobApplicationsofUserRes)
	err := c.cc.Invoke(ctx, CompanyService_GetAllJobApplicationsofUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations must embed UnimplementedCompanyServiceServer
// for forward compatibility
type CompanyServiceServer interface {
	RegisterCompany(context.Context, *RegisterCompanyRequest) (*CompanyResponce, error)
	GetCompanyTypes(*empty.Empty, CompanyService_GetCompanyTypesServer) error
	GetPermissions(*empty.Empty, CompanyService_GetPermissionsServer) error
	AddEmployees(context.Context, *AddEmployeeReq) (*empty.Empty, error)
	AttachRoleWithPermisssions(context.Context, *AttachRoleWithPermisssionsReq) (*empty.Empty, error)
	GetAttachedRoleswithPermissions(*GetAttachedRoleswithPermissionsReq, CompanyService_GetAttachedRoleswithPermissionsServer) error
	AddCompanyTypes(context.Context, *AddCompanyTypeReq) (*empty.Empty, error)
	Permissions(context.Context, *AddPermissionReq) (*empty.Empty, error)
	GetCompanyDetails(context.Context, *GetCompanyReq) (*GetCompanyDetailsRes, error)
	GetCompanyEmployees(*GetCompanyReq, CompanyService_GetCompanyEmployeesServer) error
	LogintoCompany(context.Context, *LogintoCompanyReq) (*LogintoCompanyRes, error)
	AddMemberStatus(context.Context, *MemberStatusReq) (*empty.Empty, error)
	SalaryIncrementofEmployee(context.Context, *SalaryIncrementofEmployeeReq) (*empty.Empty, error)
	SalaryIncrementofRole(context.Context, *SalaryIncrementofRoleReq) (*empty.Empty, error)
	GetAverageSalaryperRole(*GetAverageSalaryperRoleReq, CompanyService_GetAverageSalaryperRoleServer) error
	GetSalaryLeaderboard(*GetSalaryLeaderboardReq, CompanyService_GetSalaryLeaderboardServer) error
	RaiseProblem(context.Context, *RaiseProblemReq) (*empty.Empty, error)
	GetProblems(*GetProblemsReq, CompanyService_GetProblemsServer) error
	GetProfileViews(context.Context, *GetProfileViewsReq) (*GetProfileViewsRes, error)
	GetVisitors(*GetVisitorsReq, CompanyService_GetVisitorsServer) error
	GetPermission(context.Context, *GetPermisssionReq) (*GetPermisssionRes, error)
	IsEmployeeExists(context.Context, *IsEmployeeExistsReq) (*IsEmployeeExistsRes, error)
	AddClient(context.Context, *AddClientReq) (*empty.Empty, error)
	AssociateClientWithProject(context.Context, *AssociateClientWithProjectReq) (*empty.Empty, error)
	GetPastProjects(*GetProjectsReq, CompanyService_GetPastProjectsServer) error
	GetClients(*GetClientsReq, CompanyService_GetClientsServer) error
	GetRevenueGenerated(*GetRevenueGeneratedReq, CompanyService_GetRevenueGeneratedServer) error
	UpdateRevenueStatus(context.Context, *UpdateRevenueStatusReq) (*empty.Empty, error)
	AttachCompanyPolicies(context.Context, *AttachCompanyPoliciesReq) (*empty.Empty, error)
	UpdatePaymentStatusofEmployee(context.Context, *UpdatePaymentStatusofEmployeeReq) (*empty.Empty, error)
	AssignProblem(context.Context, *AssignProblemReq) (*empty.Empty, error)
	ResolveProblem(context.Context, *ResolveProblemReq) (*empty.Empty, error)
	ApplyForLeave(context.Context, *ApplyForLeaveReq) (*empty.Empty, error)
	GetEmployeeLeaveRequests(*GetEmployeeLeaveRequestsReq, CompanyService_GetEmployeeLeaveRequestsServer) error
	DecideEmployeeLeave(context.Context, *DecideEmployeeLeaveRequest) (*empty.Empty, error)
	GetLeaves(*GetLeavesReq, CompanyService_GetLeavesServer) error
	GetStreamofClients(CompanyService_GetStreamofClientsServer) error
	PostJobs(context.Context, *PostJobsReq) (*empty.Empty, error)
	GetJobsofCompany(*GetJobsofCompanyReq, CompanyService_GetJobsofCompanyServer) error
	GetJobApplications(*GetJobApplicationsReq, CompanyService_GetJobApplicationsServer) error
	ShortlistApplications(context.Context, *ShortlistApplicationsReq) (*empty.Empty, error)
	ScheduleInterview(context.Context, *ScheduleInterviewReq) (*empty.Empty, error)
	GetScheduledInterviews(*GetScheduledInterviewsReq, CompanyService_GetScheduledInterviewsServer) error
	GetDetailsofApplicationByID(context.Context, *GetDetailsofApplicationByIDReq) (*GetDetailsofApplicationByIDRes, error)
	GetScheduledInterviewsofUser(context.Context, *GetScheduledInterviewsofUserReq) (*GetScheduledInterviewsofUserRes, error)
	RescheduleInterview(context.Context, *RescheduleInterviewReq) (*empty.Empty, error)
	GetShortlistedApplications(*GetShortlistedApplicationsReq, CompanyService_GetShortlistedApplicationsServer) error
	GetJobs(*GetJobsReq, CompanyService_GetJobsServer) error
	GetAllJobApplicationsofUser(context.Context, *GetAllJobApplicationsofUserReq) (*GetAllJobApplicationsofUserRes, error)
	mustEmbedUnimplementedCompanyServiceServer()
}

// UnimplementedCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (UnimplementedCompanyServiceServer) RegisterCompany(context.Context, *RegisterCompanyRequest) (*CompanyResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCompany not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyTypes(*empty.Empty, CompanyService_GetCompanyTypesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCompanyTypes not implemented")
}
func (UnimplementedCompanyServiceServer) GetPermissions(*empty.Empty, CompanyService_GetPermissionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedCompanyServiceServer) AddEmployees(context.Context, *AddEmployeeReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmployees not implemented")
}
func (UnimplementedCompanyServiceServer) AttachRoleWithPermisssions(context.Context, *AttachRoleWithPermisssionsReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachRoleWithPermisssions not implemented")
}
func (UnimplementedCompanyServiceServer) GetAttachedRoleswithPermissions(*GetAttachedRoleswithPermissionsReq, CompanyService_GetAttachedRoleswithPermissionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAttachedRoleswithPermissions not implemented")
}
func (UnimplementedCompanyServiceServer) AddCompanyTypes(context.Context, *AddCompanyTypeReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompanyTypes not implemented")
}
func (UnimplementedCompanyServiceServer) Permissions(context.Context, *AddPermissionReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Permissions not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyDetails(context.Context, *GetCompanyReq) (*GetCompanyDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyDetails not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyEmployees(*GetCompanyReq, CompanyService_GetCompanyEmployeesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCompanyEmployees not implemented")
}
func (UnimplementedCompanyServiceServer) LogintoCompany(context.Context, *LogintoCompanyReq) (*LogintoCompanyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogintoCompany not implemented")
}
func (UnimplementedCompanyServiceServer) AddMemberStatus(context.Context, *MemberStatusReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberStatus not implemented")
}
func (UnimplementedCompanyServiceServer) SalaryIncrementofEmployee(context.Context, *SalaryIncrementofEmployeeReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalaryIncrementofEmployee not implemented")
}
func (UnimplementedCompanyServiceServer) SalaryIncrementofRole(context.Context, *SalaryIncrementofRoleReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalaryIncrementofRole not implemented")
}
func (UnimplementedCompanyServiceServer) GetAverageSalaryperRole(*GetAverageSalaryperRoleReq, CompanyService_GetAverageSalaryperRoleServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAverageSalaryperRole not implemented")
}
func (UnimplementedCompanyServiceServer) GetSalaryLeaderboard(*GetSalaryLeaderboardReq, CompanyService_GetSalaryLeaderboardServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSalaryLeaderboard not implemented")
}
func (UnimplementedCompanyServiceServer) RaiseProblem(context.Context, *RaiseProblemReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaiseProblem not implemented")
}
func (UnimplementedCompanyServiceServer) GetProblems(*GetProblemsReq, CompanyService_GetProblemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProblems not implemented")
}
func (UnimplementedCompanyServiceServer) GetProfileViews(context.Context, *GetProfileViewsReq) (*GetProfileViewsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileViews not implemented")
}
func (UnimplementedCompanyServiceServer) GetVisitors(*GetVisitorsReq, CompanyService_GetVisitorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVisitors not implemented")
}
func (UnimplementedCompanyServiceServer) GetPermission(context.Context, *GetPermisssionReq) (*GetPermisssionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedCompanyServiceServer) IsEmployeeExists(context.Context, *IsEmployeeExistsReq) (*IsEmployeeExistsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEmployeeExists not implemented")
}
func (UnimplementedCompanyServiceServer) AddClient(context.Context, *AddClientReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedCompanyServiceServer) AssociateClientWithProject(context.Context, *AssociateClientWithProjectReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateClientWithProject not implemented")
}
func (UnimplementedCompanyServiceServer) GetPastProjects(*GetProjectsReq, CompanyService_GetPastProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPastProjects not implemented")
}
func (UnimplementedCompanyServiceServer) GetClients(*GetClientsReq, CompanyService_GetClientsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (UnimplementedCompanyServiceServer) GetRevenueGenerated(*GetRevenueGeneratedReq, CompanyService_GetRevenueGeneratedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRevenueGenerated not implemented")
}
func (UnimplementedCompanyServiceServer) UpdateRevenueStatus(context.Context, *UpdateRevenueStatusReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRevenueStatus not implemented")
}
func (UnimplementedCompanyServiceServer) AttachCompanyPolicies(context.Context, *AttachCompanyPoliciesReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachCompanyPolicies not implemented")
}
func (UnimplementedCompanyServiceServer) UpdatePaymentStatusofEmployee(context.Context, *UpdatePaymentStatusofEmployeeReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentStatusofEmployee not implemented")
}
func (UnimplementedCompanyServiceServer) AssignProblem(context.Context, *AssignProblemReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignProblem not implemented")
}
func (UnimplementedCompanyServiceServer) ResolveProblem(context.Context, *ResolveProblemReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveProblem not implemented")
}
func (UnimplementedCompanyServiceServer) ApplyForLeave(context.Context, *ApplyForLeaveReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyForLeave not implemented")
}
func (UnimplementedCompanyServiceServer) GetEmployeeLeaveRequests(*GetEmployeeLeaveRequestsReq, CompanyService_GetEmployeeLeaveRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEmployeeLeaveRequests not implemented")
}
func (UnimplementedCompanyServiceServer) DecideEmployeeLeave(context.Context, *DecideEmployeeLeaveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideEmployeeLeave not implemented")
}
func (UnimplementedCompanyServiceServer) GetLeaves(*GetLeavesReq, CompanyService_GetLeavesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLeaves not implemented")
}
func (UnimplementedCompanyServiceServer) GetStreamofClients(CompanyService_GetStreamofClientsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamofClients not implemented")
}
func (UnimplementedCompanyServiceServer) PostJobs(context.Context, *PostJobsReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJobs not implemented")
}
func (UnimplementedCompanyServiceServer) GetJobsofCompany(*GetJobsofCompanyReq, CompanyService_GetJobsofCompanyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobsofCompany not implemented")
}
func (UnimplementedCompanyServiceServer) GetJobApplications(*GetJobApplicationsReq, CompanyService_GetJobApplicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobApplications not implemented")
}
func (UnimplementedCompanyServiceServer) ShortlistApplications(context.Context, *ShortlistApplicationsReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortlistApplications not implemented")
}
func (UnimplementedCompanyServiceServer) ScheduleInterview(context.Context, *ScheduleInterviewReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleInterview not implemented")
}
func (UnimplementedCompanyServiceServer) GetScheduledInterviews(*GetScheduledInterviewsReq, CompanyService_GetScheduledInterviewsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetScheduledInterviews not implemented")
}
func (UnimplementedCompanyServiceServer) GetDetailsofApplicationByID(context.Context, *GetDetailsofApplicationByIDReq) (*GetDetailsofApplicationByIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailsofApplicationByID not implemented")
}
func (UnimplementedCompanyServiceServer) GetScheduledInterviewsofUser(context.Context, *GetScheduledInterviewsofUserReq) (*GetScheduledInterviewsofUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledInterviewsofUser not implemented")
}
func (UnimplementedCompanyServiceServer) RescheduleInterview(context.Context, *RescheduleInterviewReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescheduleInterview not implemented")
}
func (UnimplementedCompanyServiceServer) GetShortlistedApplications(*GetShortlistedApplicationsReq, CompanyService_GetShortlistedApplicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetShortlistedApplications not implemented")
}
func (UnimplementedCompanyServiceServer) GetJobs(*GetJobsReq, CompanyService_GetJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedCompanyServiceServer) GetAllJobApplicationsofUser(context.Context, *GetAllJobApplicationsofUserReq) (*GetAllJobApplicationsofUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllJobApplicationsofUser not implemented")
}
func (UnimplementedCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s grpc.ServiceRegistrar, srv CompanyServiceServer) {
	s.RegisterService(&CompanyService_ServiceDesc, srv)
}

func _CompanyService_RegisterCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).RegisterCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_RegisterCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).RegisterCompany(ctx, req.(*RegisterCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyTypes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetCompanyTypes(m, &companyServiceGetCompanyTypesServer{stream})
}

type CompanyService_GetCompanyTypesServer interface {
	Send(*GetCompanyTypesRes) error
	grpc.ServerStream
}

type companyServiceGetCompanyTypesServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetCompanyTypesServer) Send(m *GetCompanyTypesRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetPermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetPermissions(m, &companyServiceGetPermissionsServer{stream})
}

type CompanyService_GetPermissionsServer interface {
	Send(*Permission) error
	grpc.ServerStream
}

type companyServiceGetPermissionsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetPermissionsServer) Send(m *Permission) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_AddEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AddEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddEmployees(ctx, req.(*AddEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AttachRoleWithPermisssions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachRoleWithPermisssionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AttachRoleWithPermisssions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AttachRoleWithPermisssions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AttachRoleWithPermisssions(ctx, req.(*AttachRoleWithPermisssionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAttachedRoleswithPermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAttachedRoleswithPermissionsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetAttachedRoleswithPermissions(m, &companyServiceGetAttachedRoleswithPermissionsServer{stream})
}

type CompanyService_GetAttachedRoleswithPermissionsServer interface {
	Send(*GetAttachedRoleswithPermissionsRes) error
	grpc.ServerStream
}

type companyServiceGetAttachedRoleswithPermissionsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetAttachedRoleswithPermissionsServer) Send(m *GetAttachedRoleswithPermissionsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_AddCompanyTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompanyTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddCompanyTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AddCompanyTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddCompanyTypes(ctx, req.(*AddCompanyTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Permissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Permissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_Permissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Permissions(ctx, req.(*AddPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetCompanyDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyDetails(ctx, req.(*GetCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyEmployees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCompanyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetCompanyEmployees(m, &companyServiceGetCompanyEmployeesServer{stream})
}

type CompanyService_GetCompanyEmployeesServer interface {
	Send(*GetCompanyEmployeesRes) error
	grpc.ServerStream
}

type companyServiceGetCompanyEmployeesServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetCompanyEmployeesServer) Send(m *GetCompanyEmployeesRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_LogintoCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogintoCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).LogintoCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_LogintoCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).LogintoCompany(ctx, req.(*LogintoCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AddMemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddMemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AddMemberStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddMemberStatus(ctx, req.(*MemberStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_SalaryIncrementofEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalaryIncrementofEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).SalaryIncrementofEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_SalaryIncrementofEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).SalaryIncrementofEmployee(ctx, req.(*SalaryIncrementofEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_SalaryIncrementofRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalaryIncrementofRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).SalaryIncrementofRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_SalaryIncrementofRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).SalaryIncrementofRole(ctx, req.(*SalaryIncrementofRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAverageSalaryperRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAverageSalaryperRoleReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetAverageSalaryperRole(m, &companyServiceGetAverageSalaryperRoleServer{stream})
}

type CompanyService_GetAverageSalaryperRoleServer interface {
	Send(*GetAverageSalaryperRoleRes) error
	grpc.ServerStream
}

type companyServiceGetAverageSalaryperRoleServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetAverageSalaryperRoleServer) Send(m *GetAverageSalaryperRoleRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetSalaryLeaderboard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSalaryLeaderboardReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetSalaryLeaderboard(m, &companyServiceGetSalaryLeaderboardServer{stream})
}

type CompanyService_GetSalaryLeaderboardServer interface {
	Send(*GetSalaryLeaderboardRes) error
	grpc.ServerStream
}

type companyServiceGetSalaryLeaderboardServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetSalaryLeaderboardServer) Send(m *GetSalaryLeaderboardRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_RaiseProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaiseProblemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).RaiseProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_RaiseProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).RaiseProblem(ctx, req.(*RaiseProblemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetProblems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProblemsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetProblems(m, &companyServiceGetProblemsServer{stream})
}

type CompanyService_GetProblemsServer interface {
	Send(*GetProblemsRes) error
	grpc.ServerStream
}

type companyServiceGetProblemsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetProblemsServer) Send(m *GetProblemsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetProfileViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileViewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetProfileViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetProfileViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetProfileViews(ctx, req.(*GetProfileViewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetVisitors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVisitorsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetVisitors(m, &companyServiceGetVisitorsServer{stream})
}

type CompanyService_GetVisitorsServer interface {
	Send(*GetVisitorsRes) error
	grpc.ServerStream
}

type companyServiceGetVisitorsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetVisitorsServer) Send(m *GetVisitorsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermisssionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetPermission(ctx, req.(*GetPermisssionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_IsEmployeeExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEmployeeExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).IsEmployeeExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_IsEmployeeExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).IsEmployeeExists(ctx, req.(*IsEmployeeExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AddClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddClient(ctx, req.(*AddClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AssociateClientWithProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateClientWithProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AssociateClientWithProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AssociateClientWithProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AssociateClientWithProject(ctx, req.(*AssociateClientWithProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetPastProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProjectsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetPastProjects(m, &companyServiceGetPastProjectsServer{stream})
}

type CompanyService_GetPastProjectsServer interface {
	Send(*GetProjectsRes) error
	grpc.ServerStream
}

type companyServiceGetPastProjectsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetPastProjectsServer) Send(m *GetProjectsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetClients_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetClientsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetClients(m, &companyServiceGetClientsServer{stream})
}

type CompanyService_GetClientsServer interface {
	Send(*GetClientsRes) error
	grpc.ServerStream
}

type companyServiceGetClientsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetClientsServer) Send(m *GetClientsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetRevenueGenerated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRevenueGeneratedReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetRevenueGenerated(m, &companyServiceGetRevenueGeneratedServer{stream})
}

type CompanyService_GetRevenueGeneratedServer interface {
	Send(*GetRevenueGeneratedRes) error
	grpc.ServerStream
}

type companyServiceGetRevenueGeneratedServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetRevenueGeneratedServer) Send(m *GetRevenueGeneratedRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_UpdateRevenueStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRevenueStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateRevenueStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_UpdateRevenueStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateRevenueStatus(ctx, req.(*UpdateRevenueStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AttachCompanyPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachCompanyPoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AttachCompanyPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AttachCompanyPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AttachCompanyPolicies(ctx, req.(*AttachCompanyPoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdatePaymentStatusofEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentStatusofEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdatePaymentStatusofEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_UpdatePaymentStatusofEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdatePaymentStatusofEmployee(ctx, req.(*UpdatePaymentStatusofEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AssignProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignProblemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AssignProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_AssignProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AssignProblem(ctx, req.(*AssignProblemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ResolveProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveProblemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ResolveProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_ResolveProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ResolveProblem(ctx, req.(*ResolveProblemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ApplyForLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyForLeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ApplyForLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_ApplyForLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ApplyForLeave(ctx, req.(*ApplyForLeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetEmployeeLeaveRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEmployeeLeaveRequestsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetEmployeeLeaveRequests(m, &companyServiceGetEmployeeLeaveRequestsServer{stream})
}

type CompanyService_GetEmployeeLeaveRequestsServer interface {
	Send(*GetEmployeeLeaveRequestsRes) error
	grpc.ServerStream
}

type companyServiceGetEmployeeLeaveRequestsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetEmployeeLeaveRequestsServer) Send(m *GetEmployeeLeaveRequestsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_DecideEmployeeLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecideEmployeeLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DecideEmployeeLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_DecideEmployeeLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DecideEmployeeLeave(ctx, req.(*DecideEmployeeLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetLeaves_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLeavesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetLeaves(m, &companyServiceGetLeavesServer{stream})
}

type CompanyService_GetLeavesServer interface {
	Send(*GetLeavesRes) error
	grpc.ServerStream
}

type companyServiceGetLeavesServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetLeavesServer) Send(m *GetLeavesRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetStreamofClients_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CompanyServiceServer).GetStreamofClients(&companyServiceGetStreamofClientsServer{stream})
}

type CompanyService_GetStreamofClientsServer interface {
	Send(*GetStreamofClientsRes) error
	Recv() (*GetStreamofClientsReq, error)
	grpc.ServerStream
}

type companyServiceGetStreamofClientsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetStreamofClientsServer) Send(m *GetStreamofClientsRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *companyServiceGetStreamofClientsServer) Recv() (*GetStreamofClientsReq, error) {
	m := new(GetStreamofClientsReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CompanyService_PostJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJobsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).PostJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_PostJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).PostJobs(ctx, req.(*PostJobsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetJobsofCompany_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJobsofCompanyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetJobsofCompany(m, &companyServiceGetJobsofCompanyServer{stream})
}

type CompanyService_GetJobsofCompanyServer interface {
	Send(*GetJobsofCompanyRes) error
	grpc.ServerStream
}

type companyServiceGetJobsofCompanyServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetJobsofCompanyServer) Send(m *GetJobsofCompanyRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetJobApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJobApplicationsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetJobApplications(m, &companyServiceGetJobApplicationsServer{stream})
}

type CompanyService_GetJobApplicationsServer interface {
	Send(*GetJobApplicationsRes) error
	grpc.ServerStream
}

type companyServiceGetJobApplicationsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetJobApplicationsServer) Send(m *GetJobApplicationsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_ShortlistApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortlistApplicationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ShortlistApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_ShortlistApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ShortlistApplications(ctx, req.(*ShortlistApplicationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ScheduleInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleInterviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ScheduleInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_ScheduleInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ScheduleInterview(ctx, req.(*ScheduleInterviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetScheduledInterviews_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetScheduledInterviewsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetScheduledInterviews(m, &companyServiceGetScheduledInterviewsServer{stream})
}

type CompanyService_GetScheduledInterviewsServer interface {
	Send(*GetScheduledInterviewsRes) error
	grpc.ServerStream
}

type companyServiceGetScheduledInterviewsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetScheduledInterviewsServer) Send(m *GetScheduledInterviewsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetDetailsofApplicationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsofApplicationByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetDetailsofApplicationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetDetailsofApplicationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetDetailsofApplicationByID(ctx, req.(*GetDetailsofApplicationByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetScheduledInterviewsofUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledInterviewsofUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetScheduledInterviewsofUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetScheduledInterviewsofUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetScheduledInterviewsofUser(ctx, req.(*GetScheduledInterviewsofUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_RescheduleInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RescheduleInterviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).RescheduleInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_RescheduleInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).RescheduleInterview(ctx, req.(*RescheduleInterviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetShortlistedApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetShortlistedApplicationsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetShortlistedApplications(m, &companyServiceGetShortlistedApplicationsServer{stream})
}

type CompanyService_GetShortlistedApplicationsServer interface {
	Send(*GetShortlistedApplicationsRes) error
	grpc.ServerStream
}

type companyServiceGetShortlistedApplicationsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetShortlistedApplicationsServer) Send(m *GetShortlistedApplicationsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJobsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).GetJobs(m, &companyServiceGetJobsServer{stream})
}

type CompanyService_GetJobsServer interface {
	Send(*GetJobsRes) error
	grpc.ServerStream
}

type companyServiceGetJobsServer struct {
	grpc.ServerStream
}

func (x *companyServiceGetJobsServer) Send(m *GetJobsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CompanyService_GetAllJobApplicationsofUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllJobApplicationsofUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAllJobApplicationsofUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetAllJobApplicationsofUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAllJobApplicationsofUser(ctx, req.(*GetAllJobApplicationsofUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyService_ServiceDesc is the grpc.ServiceDesc for CompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCompany",
			Handler:    _CompanyService_RegisterCompany_Handler,
		},
		{
			MethodName: "AddEmployees",
			Handler:    _CompanyService_AddEmployees_Handler,
		},
		{
			MethodName: "AttachRoleWithPermisssions",
			Handler:    _CompanyService_AttachRoleWithPermisssions_Handler,
		},
		{
			MethodName: "AddCompanyTypes",
			Handler:    _CompanyService_AddCompanyTypes_Handler,
		},
		{
			MethodName: "Permissions",
			Handler:    _CompanyService_Permissions_Handler,
		},
		{
			MethodName: "GetCompanyDetails",
			Handler:    _CompanyService_GetCompanyDetails_Handler,
		},
		{
			MethodName: "LogintoCompany",
			Handler:    _CompanyService_LogintoCompany_Handler,
		},
		{
			MethodName: "AddMemberStatus",
			Handler:    _CompanyService_AddMemberStatus_Handler,
		},
		{
			MethodName: "SalaryIncrementofEmployee",
			Handler:    _CompanyService_SalaryIncrementofEmployee_Handler,
		},
		{
			MethodName: "SalaryIncrementofRole",
			Handler:    _CompanyService_SalaryIncrementofRole_Handler,
		},
		{
			MethodName: "RaiseProblem",
			Handler:    _CompanyService_RaiseProblem_Handler,
		},
		{
			MethodName: "GetProfileViews",
			Handler:    _CompanyService_GetProfileViews_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _CompanyService_GetPermission_Handler,
		},
		{
			MethodName: "IsEmployeeExists",
			Handler:    _CompanyService_IsEmployeeExists_Handler,
		},
		{
			MethodName: "AddClient",
			Handler:    _CompanyService_AddClient_Handler,
		},
		{
			MethodName: "AssociateClientWithProject",
			Handler:    _CompanyService_AssociateClientWithProject_Handler,
		},
		{
			MethodName: "UpdateRevenueStatus",
			Handler:    _CompanyService_UpdateRevenueStatus_Handler,
		},
		{
			MethodName: "AttachCompanyPolicies",
			Handler:    _CompanyService_AttachCompanyPolicies_Handler,
		},
		{
			MethodName: "UpdatePaymentStatusofEmployee",
			Handler:    _CompanyService_UpdatePaymentStatusofEmployee_Handler,
		},
		{
			MethodName: "AssignProblem",
			Handler:    _CompanyService_AssignProblem_Handler,
		},
		{
			MethodName: "ResolveProblem",
			Handler:    _CompanyService_ResolveProblem_Handler,
		},
		{
			MethodName: "ApplyForLeave",
			Handler:    _CompanyService_ApplyForLeave_Handler,
		},
		{
			MethodName: "DecideEmployeeLeave",
			Handler:    _CompanyService_DecideEmployeeLeave_Handler,
		},
		{
			MethodName: "PostJobs",
			Handler:    _CompanyService_PostJobs_Handler,
		},
		{
			MethodName: "ShortlistApplications",
			Handler:    _CompanyService_ShortlistApplications_Handler,
		},
		{
			MethodName: "ScheduleInterview",
			Handler:    _CompanyService_ScheduleInterview_Handler,
		},
		{
			MethodName: "GetDetailsofApplicationByID",
			Handler:    _CompanyService_GetDetailsofApplicationByID_Handler,
		},
		{
			MethodName: "GetScheduledInterviewsofUser",
			Handler:    _CompanyService_GetScheduledInterviewsofUser_Handler,
		},
		{
			MethodName: "RescheduleInterview",
			Handler:    _CompanyService_RescheduleInterview_Handler,
		},
		{
			MethodName: "GetAllJobApplicationsofUser",
			Handler:    _CompanyService_GetAllJobApplicationsofUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCompanyTypes",
			Handler:       _CompanyService_GetCompanyTypes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPermissions",
			Handler:       _CompanyService_GetPermissions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAttachedRoleswithPermissions",
			Handler:       _CompanyService_GetAttachedRoleswithPermissions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCompanyEmployees",
			Handler:       _CompanyService_GetCompanyEmployees_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAverageSalaryperRole",
			Handler:       _CompanyService_GetAverageSalaryperRole_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSalaryLeaderboard",
			Handler:       _CompanyService_GetSalaryLeaderboard_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProblems",
			Handler:       _CompanyService_GetProblems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVisitors",
			Handler:       _CompanyService_GetVisitors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPastProjects",
			Handler:       _CompanyService_GetPastProjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetClients",
			Handler:       _CompanyService_GetClients_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRevenueGenerated",
			Handler:       _CompanyService_GetRevenueGenerated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEmployeeLeaveRequests",
			Handler:       _CompanyService_GetEmployeeLeaveRequests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLeaves",
			Handler:       _CompanyService_GetLeaves_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStreamofClients",
			Handler:       _CompanyService_GetStreamofClients_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetJobsofCompany",
			Handler:       _CompanyService_GetJobsofCompany_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetJobApplications",
			Handler:       _CompanyService_GetJobApplications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetScheduledInterviews",
			Handler:       _CompanyService_GetScheduledInterviews_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetShortlistedApplications",
			Handler:       _CompanyService_GetShortlistedApplications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetJobs",
			Handler:       _CompanyService_GetJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "company.proto",
}
